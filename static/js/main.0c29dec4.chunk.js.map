{"version":3,"sources":["components/Header/Header.module.css","components/Input/Input.module.css","components/Test/Test.module.css","components/Button/Button.module.css","components/Checkbox/Checkbox.module.css","components/Login.tsx","components/Profile/Profile.tsx","components/SIngUp/SingUp.tsx","components/PasswordRestore/Restore.tsx","components/NewPassword/NewPassword.tsx","components/Input/Input.tsx","components/Button/Button.tsx","components/Checkbox/Checkbox.tsx","components/Test/Test.tsx","components/Error.tsx","components/Routes.tsx","components/Header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Login","Profile","SingUp","Restore","NewPassword","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","restProps","className","spanClassName","finalInputClassName","style","input","errorInput","e","currentTarget","value","key","SuperButton","button","SuperCheckbox","onChangeChecked","children","checked","checkbox","Test","useState","text","setText","testContainer","inputContainer","Input","buttonContainer","Button","checkboxContainer","Checkbox","Error","PATH","Routing","path","element","Header","header","link","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.0c29dec4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__35P_u\",\"link\":\"Header_link__1EsrN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3Osfx\",\"errorInput\":\"Input_errorInput__2Q5QR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testContainer\":\"Test_testContainer__yt5qE\",\"inputContainer\":\"Test_inputContainer__1ZoQo\",\"buttonContainer\":\"Test_buttonContainer__2D87_\",\"checkboxContainer\":\"Test_checkboxContainer__PjKAl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__25LOZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__UXVTr\"};","import React from \"react\";\r\n\r\nexport const Login = () => {\r\n    return <div>Login</div>\r\n}","import React from \"react\";\r\n\r\nexport const Profile = () => {\r\n    return (\r\n        <div>Profile</div>\r\n    )\r\n}","export const SingUp = () => {\r\n    return (\r\n        <div>Sing Up</div>\r\n    )\r\n}","export const Restore = () => {\r\n    return <div>Restore</div>\r\n}","export const NewPassword = () => {\r\n    return <div>New Password</div>\r\n}","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent } from \"react\"\r\nimport style                                                                         from \"./Input.module.css\"\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    },\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalInputClassName = `${ style.input } ${ error ? style.errorInput : style.input }`\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={ 'text' }\r\n                onChange={ onChangeCallback }\r\n                onKeyPress={ onKeyPressCallback }\r\n                className={ style.input }\r\n\r\n                { ...restProps } // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            { error && <span className={ finalInputClassName }>{ error }</span> }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\"\r\nimport style                                              from \"./Button.module.css\"\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = ({ className, ...restProps }) => {\r\n\r\n    return (\r\n        <button\r\n            className={ style.button }\r\n            { ...restProps } // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes } from \"react\"\r\nimport style                                                          from \"./Checkbox.module.css\"\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    },\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={ 'checkbox' }\r\n                onChange={ onChangeCallback }\r\n                className={ style.checkbox }\r\n\r\n                { ...restProps } // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import Input        from \"../Input/Input\";\r\nimport Button       from \"../Button/Button\";\r\nimport Checkbox     from \"../Checkbox/Checkbox\";\r\nimport style        from \"./Test.module.css\";\r\nimport { useState } from \"react\";\r\n\r\nexport const Test = () => {\r\n    const [text, setText] = useState<string>(\"\")\r\n    const error = text ? '' : \"error\"\r\n\r\n    return (\r\n        <div className={ style.testContainer }>\r\n            <div className={ style.inputContainer }>\r\n                <span>Input Example</span>\r\n                <Input onChangeText={ setText }\r\n                       value={ text }\r\n                       error={ error }/>\r\n            </div>\r\n            <div className={ style.buttonContainer }>\r\n                <span>Button Example</span>\r\n                <Button>Test</Button>\r\n            </div>\r\n            <div className={ style.checkboxContainer }>\r\n                <span>Checkbox Example</span>\r\n                <Checkbox/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","export const Error = () => {\r\n    return <div>Error</div>\r\n}","import { Route, Routes } from \"react-router-dom\";\r\nimport { Login }         from \"./Login\";\r\nimport { Profile }       from \"./Profile/Profile\";\r\nimport { SingUp }        from \"./SIngUp/SingUp\";\r\nimport { Restore }       from \"./PasswordRestore/Restore\";\r\nimport { NewPassword }   from \"./NewPassword/NewPassword\";\r\nimport { Test }          from \"./Test/Test\";\r\nimport { Error }         from \"./Error\"\r\n\r\nexport const PATH = {\r\n    LOGIN: \"login\",\r\n    PROFILE: \"profile\",\r\n    SING_UP: \"singup\",\r\n    PASSWORD_RESTORE: 'restore',\r\n    NEW_PASSWORD: 'newPassword',\r\n    TEST: 'test',\r\n}\r\n\r\nexport const Routing = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={ \"/\" } element={ <Login/> }/>\r\n            <Route path={ PATH.PROFILE } element={ <Profile/> }/>\r\n            <Route path={ PATH.SING_UP } element={ <SingUp/> }/>\r\n            <Route path={ PATH.PASSWORD_RESTORE } element={ <Restore/> }/>\r\n            <Route path={ PATH.NEW_PASSWORD } element={ <NewPassword/> }/>\r\n            <Route path={ PATH.TEST } element={ <Test/> }/>\r\n            <Route path={ PATH.LOGIN } element={ <Login/> }/>\r\n            <Route path=\"*\" element={ <Error/> }/>\r\n        </Routes>\r\n    )\r\n}\r\n\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { PATH }    from \"../Routes\";\r\nimport style       from \"./Header.module.css\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={ style.header }>\r\n            <NavLink className={ style.link } to={ PATH.PROFILE }>Profile</NavLink>\r\n            <NavLink className={ style.link } to={ PATH.LOGIN }>Login</NavLink>\r\n            <NavLink className={ style.link } to={ PATH.SING_UP }>Sing Up</NavLink>\r\n            <NavLink className={ style.link } to={ PATH.TEST }>Test</NavLink>\r\n        </div>\r\n    )\r\n}","import React       from 'react';\nimport './App.css';\nimport { Routing } from \"./components/Routes\";\nimport { Header }  from \"./components/Header/Header\";\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Routing/>\n        </div>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React             from 'react';\nimport ReactDOM          from 'react-dom';\nimport './index.css';\nimport { App }           from './App';\nimport reportWebVitals   from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter basename=\"FridayProject/\">\n        <App/>\n    </BrowserRouter>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}