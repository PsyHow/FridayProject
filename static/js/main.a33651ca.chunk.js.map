{"version":3,"sources":["components/Login/Login.module.css","components/Navbar/Navbar.module.css","features/authorization/forgot/ui/PasswordRestore/Restore.module.css","components/Input/Input.module.css","components/Test/Test.module.css","features/authorization/forgot/ui/NewPassword/NewPassword.module.css","components/Button/Button.module.css","components/Checkbox/Checkbox.module.css","features/authorization/forgot/ui/SendEmail/SendEmail.module.css","bll/profileReducer.ts","bll/loginReducer.ts","components/Login/Login.tsx","components/Profile/Profile.tsx","components/Input/Input.tsx","components/Button/Button.tsx","features/authorization/signUp/SignUp.tsx","features/authorization/forgot/dal/ForgotApi.ts","bll/signUpReducer.ts","features/authorization/signUp/SignUpContainer.tsx","components/Checkbox/Checkbox.tsx","components/Test/Test.tsx","components/Error.tsx","features/authorization/forgot/ui/SendEmail/SendEmail.tsx","features/authorization/forgot/ui/PasswordRestore/Restore.tsx","bll/passwordRecoverReducer.ts","features/authorization/forgot/ui/PasswordRestore/PasswordRestoreContainer.tsx","features/authorization/forgot/ui/NewPassword/NewPassword.tsx","features/authorization/forgot/ui/NewPassword/NewPasswordContainer.tsx","components/Routes.tsx","components/Navbar/sidebarData.ts","components/Navbar/Navbar.tsx","App.tsx","reportWebVitals.ts","bll/FirstReducer.ts","bll/Store.ts","index.tsx"],"names":["module","exports","initialState","user","_id","email","name","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","error","avatar","setUser","userData","type","isLogged","loginTC","password","dispatch","authAPI","login","then","response","data","loggingInAC","catch","loginFailAC","instance","axios","create","withCredentials","baseURL","post","me","logout","delete","Login","useDispatch","useState","setEmail","setPassword","errorShow","setErrorShow","useSelector","state","loginReducer","to","onLoginButtonClick","a","className","styles","loginPage","formWrapper","pageTitle","signIn","label","value","onChange","e","text","currentTarget","input","forgot","onClick","button","dontHaveAcc","signUp","Profile","profileReducer","loggedIn","style","width","height","src","alt","SuperInputText","onChangeText","onKeyPress","onEnter","restProps","spanClassName","finalInputClassName","errorInput","key","SuperButton","SignUp","props","onChangeEmail","emailError","onChangePassword","passwordError","onClickHandler","isFetching","loading","container","Input","placeholder","Button","disabled","instanceDev","registrationAPI","from","message","isRegistrationSuccessful","toggleIsFetching","setEmailError","setPasswordError","SignUpContainer","registration","test","length","res","console","log","finally","signUpTC","SuperCheckbox","onChangeChecked","children","checked","checkbox","Test","setText","testContainer","inputContainer","buttonContainer","checkboxContainer","Checkbox","Error","SendEmail","Restore","sendEmail","loadingBox","setNewPassword","payload","setError","PasswordRestoreContainer","recovery","recoverTC","NewPassword","onSubmit","confirmPass","onChangeConfirmPass","NewPasswordContainer","token","useParams","pass","setPass","setConfirmPass","resetPasswordToken","newPassword","PATH","Routing","path","element","sidebarData","title","Navbar","sidebar","setSidebar","isLoggedIn","showSidebar","navbar","menuBars","navMenuItems","navbarToggle","map","item","index","navText","App","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","firstReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a33651ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__j1Pyl\",\"formWrapper\":\"Login_formWrapper__1MLKG\",\"pageTitle\":\"Login_pageTitle__20FW_\",\"signIn\":\"Login_signIn__2NDiE\",\"label\":\"Login_label__3N5WY\",\"button\":\"Login_button__2jwmN\",\"error\":\"Login_error__1VO8S\",\"input\":\"Login_input__27Rc-\",\"forgot\":\"Login_forgot__9lvLV\",\"dontHaveAcc\":\"Login_dontHaveAcc__3g5Ui\",\"signUp\":\"Login_signUp__-C6MV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__11dtx\",\"menuBars\":\"Navbar_menuBars__NmesK\",\"navMenu\":\"Navbar_navMenu__2Wf2h\",\"active\":\"Navbar_active__14Ehj\",\"navText\":\"Navbar_navText__kVW3Q\",\"navMenuItems\":\"Navbar_navMenuItems__1doNt\",\"navbarToggle\":\"Navbar_navbarToggle__5bmIs\",\"login\":\"Navbar_login__15a3e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Restore_container__2t558\",\"loading\":\"Restore_loading__1bevm\",\"loadingBox\":\"Restore_loadingBox__1iRzb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1fFa_\",\"errorInput\":\"Input_errorInput__EEFF8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testContainer\":\"Test_testContainer__bFsv0\",\"inputContainer\":\"Test_inputContainer__2-C-5\",\"buttonContainer\":\"Test_buttonContainer__1yJDK\",\"checkboxContainer\":\"Test_checkboxContainer__1P1DQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NewPassword_container__-7AX0\",\"loading\":\"NewPassword_loading__1hMGZ\",\"loadingBox\":\"NewPassword_loadingBox__3ZNYm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1cAWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__2sWqS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SendEmail_container__3AsJw\"};","let initialState : InitialStateType = {\r\n    user: {\r\n        _id: \"fake_ID\",\r\n        email: \"here is my email\",\r\n        name: \"What for do i need a name , i have id\",\r\n        publicCardPacksCount: 0,\r\n        created: null,\r\n        updated: null,\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n        error: \"no errors\",\r\n        avatar: \"some link will be here\"\r\n    },\r\n\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER\": {\r\n            return {...state, user : {...action.userData}}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setUser = (userData: UserType) => ({\r\n    type: \"SET_USER\",\r\n    userData\r\n} as const)\r\n\r\n//TYPES\r\n\r\nexport type UserType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date | null;\r\n    updated: Date | null;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error?: string;\r\n}\r\ntype InitialStateType = {\r\n    user : UserType\r\n}\r\ntype randomProfileActionsActionType = ReturnType<typeof setUser>\r\ntype ActionType = randomProfileActionsActionType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../components/Login/Login\";\r\nimport {setUser} from \"./profileReducer\";\r\n\r\nlet initialState: authReducerStateType = {\r\n    isLogged: false,\r\n    error: \"\",\r\n}\r\n\r\nexport const loginReducer = (state = initialState, action: UnionActionType_LOGIN_REDUCER): authReducerStateType => {\r\n    switch (action.type) {\r\n        case \"LOGGING_IN\":{\r\n            return {...state,isLogged : action.isLogged}\r\n        }\r\n        case \"LOGIN_FAILED\":{\r\n            return {...state,error : action.error}\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\n//THUNKS\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.login(email, password, rememberMe)\r\n            .then((response) => {\r\n                if(response.data._id){\r\n                    dispatch(loggingInAC(true))\r\n                    dispatch(setUser(response.data))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                dispatch(loginFailAC(error.response.data.error))\r\n            })\r\n    }\r\n}\r\n\r\nexport const authMe = () => (dispatch:Dispatch) => {\r\n    authAPI.me()\r\n        .then(res=> {\r\n            dispatch(loggingInAC(true))\r\n            dispatch(setUser(res.data.data))\r\n        })\r\n        .catch(()=> {\r\n            dispatch(loggingInAC(false))\r\n        })\r\n}\r\n\r\nexport const logout = () => (dispatch:Dispatch) => {\r\n    authAPI.logout()\r\n        .then(()=> {\r\n            dispatch(loggingInAC(false))\r\n        })\r\n}\r\n\r\n// ACTION CREATORS\r\nconst loginFailAC = (error: string) => ({\r\n    type: \"LOGIN_FAILED\",\r\n    error\r\n}as const)\r\n\r\nconst loggingInAC = (isLogged: boolean) => ({\r\n    type: \"LOGGING_IN\",\r\n    isLogged\r\n}as const)\r\n\r\n//TYPES\r\n\r\ntype authReducerStateType = {\r\n    isLogged: boolean\r\n    error: string\r\n}\r\n\r\ntype UnionActionType_LOGIN_REDUCER = LoginFailActionType | LoggingInActionType\r\n\r\ntype LoginFailActionType = ReturnType<typeof loginFailAC>\r\ntype LoggingInActionType = ReturnType<typeof loggingInAC>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginTC } from \"../../bll/loginReducer\";\r\nimport { AppRootStoreType } from \"../../bll/Store\";\r\nimport { Navigate, NavLink } from \"react-router-dom\";\r\nimport styles from \"./Login.module.css\"\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"http://localhost:7542/2.0/\"\r\n    // \"http://localhost:7542/2.0/\"\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    me(){\r\n        return instance.post(`auth/me`,{})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`)\r\n    }\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    let [email, setEmail] = useState(\"nya-admin@nya.nya1\") //nya-admin@nya.nya\r\n    let [password, setPassword] = useState(\"1qazxcvBG\") // 1qazxcvBG\r\n    let [rememberMe, setRememberMe] = useState(true)\r\n    let [errorShow, setErrorShow] = useState(false)\r\n\r\n    const isLogged = useSelector<AppRootStoreType, boolean>(state => state.loginReducer.isLogged)\r\n    const error = useSelector<AppRootStoreType, string>(state => state.loginReducer.error)\r\n\r\n    if (isLogged) {\r\n        return <Navigate to=\"/profile\"/>;\r\n    }\r\n\r\n    const onEmailChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorShow(false)\r\n        let text = e.currentTarget.value\r\n        setEmail(text)\r\n    }\r\n    const onPasswordChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorShow(false)\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n    const onLoginButtonClick = async () => {\r\n        dispatch(loginTC(email, password, rememberMe))\r\n        setErrorShow(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.loginPage}>\r\n            <form className={styles.formWrapper}>\r\n                <h1 className={styles.pageTitle}>It-incubator</h1>\r\n                <h2 className={styles.signIn}>Sign In</h2>\r\n                <span className={styles.label}>Email</span>\r\n                <input value={email}\r\n                       onChange={onEmailChangeHandler}\r\n                       className={styles.input}\r\n                />\r\n                {/*email*/}\r\n\r\n                <span className={styles.label}>Password</span>\r\n                <input value={password}\r\n                       onChange={onPasswordChangeHandler}\r\n                       className={styles.input}\r\n                />\r\n                {/*password*/}\r\n\r\n\r\n                <NavLink to={\"/restore\"} className={styles.forgot}>Forgot Password</NavLink>\r\n\r\n                {errorShow ? <>\r\n                        {error && <span className={styles.error}>{error}</span>}\r\n                    </> :\r\n                    <button onClick={onLoginButtonClick}\r\n                            className={styles.button}>Login\r\n                    </button>}\r\n\r\n                {/*Button Loggin or show error */}\r\n\r\n\r\n                <span className={styles.dontHaveAcc}>Don’t have an account?</span>\r\n                <NavLink to={\"/signup\"} className={styles.signUp}>Sign Up</NavLink>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppRootStoreType } from \"../../bll/Store\";\r\nimport { UserType } from \"../../bll/profileReducer\";\r\n\r\nexport const Profile = () => {\r\n\r\n    let user = useSelector<AppRootStoreType, UserType>(state => state.profileReducer.user)\r\n    const loggedIn = useSelector<AppRootStoreType,boolean>(state=> state.loginReducer.isLogged)\r\n\r\n    const style = {\r\n        width: \"200px\",\r\n        height: \"200px\"\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                !loggedIn\r\n                    ? <span>You need to login first</span>\r\n                    : <>\r\n                        <span>{user.name}</span>\r\n                        <img style={style} src={user.avatar} alt=\"user avatar\"/>\r\n                    </>\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent } from \"react\"\r\nimport style from \"./Input.module.css\"\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string | null\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    },\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalInputClassName = `${ style.input } ${ error ? style.errorInput : style.input }`\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={ 'text' }\r\n                onChange={ onChangeCallback }\r\n                onKeyPress={ onKeyPressCallback }\r\n                className={ style.input }\r\n\r\n                { ...restProps } // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            { error && <span className={ finalInputClassName }>{ error }</span> }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\"\r\nimport style from \"./Button.module.css\"\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = ({ className, ...restProps }) => {\r\n\r\n    return (\r\n        <button\r\n            className={ style.button }\r\n            { ...restProps } // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import style from \"../forgot/ui/PasswordRestore/Restore.module.css\";\r\nimport Input from \"../../../components/Input/Input\";\r\nimport Button from \"../../../components/Button/Button\";\r\n\r\nexport const SignUp = (props: PropsType) => {\r\n\r\n    const { email, onChangeEmail, emailError,\r\n        password,onChangePassword,passwordError,\r\n        onClickHandler, isFetching } = props\r\n\r\n    return (\r\n        <div>\r\n            { isFetching ? <span className={ style.loading }>loading</span>\r\n                : <div className={ style.container }>\r\n                    <h1>Sign Up</h1>\r\n                    <Input type={ \"email\" }\r\n                           placeholder={ \"Enter Email\" }\r\n                           onChangeText={ onChangeEmail }\r\n                           value={ email }\r\n                           error={ emailError }/>\r\n                    <Input type={ \"password\" }\r\n                           placeholder={ \"Enter Password\" }\r\n                           onChangeText={ onChangePassword }\r\n                           value={ password }\r\n                           error={ passwordError }/>\r\n                    <Button onClick={ onClickHandler } disabled={ isFetching }>Register</Button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    email: string\r\n    onChangeEmail: (value: string) => void\r\n    emailError: null | string\r\n    password: string\r\n    onChangePassword: (value: string) => void\r\n    passwordError: null | string\r\n    isFetching: boolean\r\n    onClickHandler: () => void\r\n}","import axios, { AxiosResponse } from \"axios\";\r\n\r\nconst instanceDev = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://back-from-friday-project.herokuapp.com/2.0/\",\r\n})\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"http://localhost:7542/2.0/\",\r\n})\r\n\r\nconst from = \"test-front-admin <ai73a@yandex.by>\"\r\n\r\nconst message = \"\\n<div style=\\\"background-color: #520a27; padding: 15px\\\">\\npassword recovery link: \\n<a href='http://localhost:3000/#/set-new-password/$token$'>link</a>\\n</div>\\n\"\r\n\r\nexport const registrationAPI = {\r\n    forgot(email: string) {\r\n        return instanceDev.post<RequestForgotType, AxiosResponse<ForgotResponseType>>(`auth/forgot/`, {\r\n            email,\r\n            from,\r\n            message,\r\n        })\r\n    },\r\n    newPassword(data: NewPasswordRequestType) {\r\n        return instance.post(`auth/set-new-password/`, data)\r\n    },\r\n    signUp(email: string, password: string) {\r\n        return instance.post(`auth/register`, { email, password })\r\n    },\r\n}\r\n\r\n//types\r\ntype ForgotResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\nexport type NewPasswordRequestType = {\r\n    password: string,\r\n    resetPasswordToken: string,\r\n}\r\ntype RequestForgotType = {\r\n    from: string,\r\n    email: string,\r\n    message: string\r\n}\r\n","import { Dispatch } from \"redux\"\r\nimport { registrationAPI } from \"../features/authorization/forgot/dal/ForgotApi\"\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    emailError: null as null | string,\r\n    passwordError: null as null | string,\r\n    isRegistrationSuccessful:false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const signUpReducer =\r\n    (state = initialState, action: RegistrationActionTypes): InitialStateType => {\r\n        switch (action.type) {\r\n            case \"REGISTRATION/ISFETCHING\":\r\n                return { ...state, isFetching: action.isFetching}\r\n            case \"REGISTRATION/EMAILERROR\":\r\n                return { ...state, emailError: action.error}\r\n            case \"REGISTRATION/PASSWORDERROR\":\r\n                return { ...state, passwordError: action.error}\r\n            case \"REGISTRATION/ISREGISTRATIONSUCCESSFUL\":\r\n                return { ...state, isRegistrationSuccessful: action.isRegistrationSuccessful}\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => ( { type: \"REGISTRATION/ISFETCHING\",  isFetching  } as const );\r\nexport const toggleIsRegistrationSuccessful = (isRegistrationSuccessful: boolean) => ( { type: \"REGISTRATION/ISREGISTRATIONSUCCESSFUL\", isRegistrationSuccessful } as const );\r\nexport const setEmailError = (error: null | string) => ( { type: \"REGISTRATION/EMAILERROR\", error  } as const );\r\nexport const setPasswordError = (error: null | string) => ( { type: \"REGISTRATION/PASSWORDERROR\",error  } as const );\r\n\r\n\r\nexport const signUpTC = (email: string, password: string) => (dispatch: Dispatch<RegistrationActionTypes>) => {\r\n   dispatch(toggleIsFetching(true))\r\n    registrationAPI.signUp(email, password)\r\n        .then(() => {\r\n            dispatch(toggleIsRegistrationSuccessful(true))\r\n        })\r\n        .catch((res) => {\r\n            console.log(res.response.data.error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(toggleIsFetching(false))\r\n        })\r\n}\r\n\r\ntype RegistrationActionTypes = ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof setEmailError>\r\n    | ReturnType<typeof setPasswordError>\r\n    | ReturnType<typeof toggleIsRegistrationSuccessful>\r\n","import {SignUp} from \"./SignUp\";\r\nimport {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStoreType} from \"../../../bll/Store\";\r\nimport {setEmailError, setPasswordError, signUpTC} from \"../../../bll/signUpReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\nexport const SignUpContainer = () => {\r\n\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n\r\n    const emailError = useSelector<AppRootStoreType, null | string>(state => state.registration.emailError)\r\n    const passwordError = useSelector<AppRootStoreType, null | string>(state => state.registration.passwordError)\r\n    const isFetching = useSelector<AppRootStoreType, boolean>(state => state.registration.isFetching)\r\n    const isRegistrationSuccessful = useSelector<AppRootStoreType, boolean>(state => state.registration.isRegistrationSuccessful)\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeEmail = (value: string) => {\r\n        setEmail(value)\r\n        dispatch(setEmailError(null))\r\n    }\r\n    const onChangePassword = (value: string) => {\r\n        setPassword(value)\r\n        dispatch(setPasswordError(null))\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n\r\n        if (email === '') {\r\n            dispatch(setEmailError('Required'))\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n            dispatch(setEmailError('Invalid email address'))\r\n        }\r\n\r\n        if (password.length < 7) {\r\n            dispatch(setPasswordError('Password should be more than 7 characters'))\r\n        }\r\n\r\n        if (!emailError && !passwordError) {\r\n            dispatch(signUpTC(email, password))\r\n        }\r\n    }\r\n\r\n    if (isRegistrationSuccessful) {\r\n        return <Navigate to={\"/\"}  />\r\n    }\r\n\r\n    return (\r\n        <SignUp email={email}\r\n                onChangeEmail={onChangeEmail}\r\n                emailError={emailError}\r\n                password={password}\r\n                onChangePassword={onChangePassword}\r\n                passwordError={passwordError}\r\n                isFetching={isFetching}\r\n                onClickHandler={onClickHandler}/>\r\n    )\r\n}","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes } from \"react\"\r\nimport style from \"./Checkbox.module.css\"\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    },\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={ 'checkbox' }\r\n                onChange={ onChangeCallback }\r\n                className={ style.checkbox }\r\n\r\n                { ...restProps } // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import Input from \"../Input/Input\";\r\nimport Button from \"../Button/Button\";\r\nimport Checkbox from \"../Checkbox/Checkbox\";\r\nimport style from \"./Test.module.css\";\r\nimport { useState } from \"react\";\r\n\r\nexport const Test = () => {\r\n    const [text, setText] = useState<string>(\"\")\r\n    const error = text ? '' : \"error\"\r\n\r\n    return (\r\n        <div className={ style.testContainer }>\r\n            <div className={ style.inputContainer }>\r\n                <span>Input Example</span>\r\n                <Input onChangeText={ setText }\r\n                       value={ text }\r\n                       error={ error }/>\r\n            </div>\r\n            <div className={ style.buttonContainer }>\r\n                <span>Button Example</span>\r\n                <Button>Test</Button>\r\n            </div>\r\n            <div className={ style.checkboxContainer }>\r\n                <span>Checkbox Example</span>\r\n                <Checkbox/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","export const Error = () => {\r\n    return <div>Error</div>\r\n}","import style from \"./SendEmail.module.css\"\r\n\r\nexport const SendEmail = () => {\r\n    return (\r\n        <div className={style.container}>\r\n            <h1>Check email</h1>\r\n\r\n            <h4>We've sent an Email with instructions to your Email</h4>\r\n        </div>\r\n    )\r\n}","import Input from \"../../../../../components/Input/Input\";\r\nimport Button from \"../../../../../components/Button/Button\";\r\nimport style from \"./Restore.module.css\"\r\nimport { SendEmail } from \"../SendEmail/SendEmail\";\r\n\r\n\r\nexport const Restore = (props: PropsType) => {\r\n\r\n    const {\r\n        email,\r\n        error,\r\n        onChangeText,\r\n        onClickHandler,\r\n        isFetching,\r\n        sendEmail,\r\n    } = props\r\n\r\n    return (\r\n        <div>\r\n            <div className={ style.loadingBox }>\r\n                { isFetching ? <span className={ style.loading }>loading</span> : '' }\r\n            </div>\r\n            { !sendEmail ?\r\n                <div className={ style.container }>\r\n                    <h1>Forgot your password ?</h1>\r\n                    <Input type={ \"email\" }\r\n                           placeholder={ \"Enter Email\" }\r\n                           onChangeText={ onChangeText }\r\n                           value={ email }\r\n                           error={ error }/>\r\n                    <h5>Enter your email address and we will send you further\r\n                        instructions</h5>\r\n                    <Button onClick={ onClickHandler } disabled={ isFetching }>Send</Button>\r\n                </div>\r\n                : <SendEmail/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype PropsType = {\r\n    email: string\r\n    error: null | string\r\n    onChangeText: (value: string) => void\r\n    onClickHandler: () => void\r\n    isFetching: boolean\r\n    sendEmail: boolean\r\n}","import { Dispatch } from \"redux\"\r\nimport { registrationAPI } from \"../features/authorization/forgot/dal/ForgotApi\"\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    error: null as null | string,\r\n    setNewPassword: false,\r\n    sendEmail: false,\r\n}\r\n\r\nexport const passwordRecoverReducer =\r\n    (state = initialState, action: passwordRecoverActionTypes): InitialStateType => {\r\n        switch (action.type) {\r\n            case \"RECOVER/IS_FETCHING\":\r\n            case \"RECOVERY/ERROR\":\r\n                return { ...state, ...action.payload }\r\n            case \"RECOVERY/SET_NEW_PASSWORD\":\r\n                return { ...state, setNewPassword: true }\r\n            case \"RECOVERY/SEND_EMAIL\":\r\n                return { ...state, sendEmail: true }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n//actions\r\nexport const isFetching = (isFetching: boolean) => ( {\r\n    type: \"RECOVER/IS_FETCHING\",\r\n    payload: { isFetching },\r\n} as const );\r\nexport const setError = (error: null | string) => ( { type: \"RECOVERY/ERROR\", payload: { error } } as const );\r\nexport const setNewPassword = () => ( { type: \"RECOVERY/SET_NEW_PASSWORD\" } as const );\r\nexport const sendEmail = () => ( { type: \"RECOVERY/SEND_EMAIL\" } as const );\r\n\r\n//thunk\r\nexport const recoverTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(isFetching(true))\r\n    registrationAPI.forgot(email)\r\n        .then(res => {\r\n            console.log(res.data)\r\n            dispatch(sendEmail())\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : ( e.message + \", more details in the console\" )\r\n            dispatch(setError(error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(isFetching(false))\r\n        })\r\n}\r\n\r\nexport const newPassword = (password: string, token: string) => (dispatch: Dispatch) => {\r\n    dispatch(isFetching(true))\r\n    registrationAPI.newPassword({ password, resetPasswordToken: token })\r\n        .then(res => {\r\n            dispatch(setNewPassword())\r\n            dispatch(setError(''))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : \"Some Error\"\r\n            dispatch(setError(error))\r\n            console.log(error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(isFetching(false))\r\n        })\r\n}\r\n\r\n//types\r\ntype InitialStateType = typeof initialState\r\n\r\ntype passwordRecoverActionTypes = ReturnType<typeof isFetching>\r\n    | ReturnType<typeof setError>\r\n    | ReturnType<typeof setNewPassword>\r\n    | ReturnType<typeof sendEmail>","import { Restore } from \"./Restore\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStoreType } from \"../../../../../bll/Store\";\r\nimport { recoverTC, setError } from \"../../../../../bll/passwordRecoverReducer\";\r\n\r\nexport const PasswordRestoreContainer = () => {\r\n\r\n    const [email, setEmail] = useState<string>('')\r\n\r\n    const error = useSelector<AppRootStoreType, null | string>(state => state.recovery.error)\r\n    const isFetching = useSelector<AppRootStoreType, boolean>(state => state.recovery.isFetching)\r\n    const sendEmail = useSelector<AppRootStoreType, boolean>(state => state.recovery.sendEmail)\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeEmail = (value: string) => {\r\n        setEmail(value)\r\n        if(error !== null) {\r\n            dispatch(setError(error))\r\n        }\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n        if(email === '') {\r\n            dispatch(setError('Required'))\r\n        } else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n            dispatch(setError('Invalid email address'))\r\n        } else {\r\n            dispatch(recoverTC(email))\r\n            setEmail('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Restore email={ email }\r\n                 onChangeText={ onChangeEmail }\r\n                 onClickHandler={ onClickHandler }\r\n                 error={ error }\r\n                 isFetching={ isFetching }\r\n                 sendEmail={sendEmail}/>\r\n    )\r\n}","import Input from \"../../../../../components/Input/Input\";\r\nimport Button from \"../../../../../components/Button/Button\";\r\nimport style from \"./NewPassword.module.css\"\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport const NewPassword = (props: PropsType) => {\r\n\r\n    const {\r\n        onChange, password, error,\r\n        onSubmit, isFetching, confirmPass,\r\n        onChangeConfirmPass, setNewPassword,\r\n    } = props\r\n\r\n    if(setNewPassword) {\r\n        return <Navigate to=\"/login\"/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={ style.loadingBox }>\r\n                { isFetching ? <span className={ style.loading }>Loading</span> : '' }\r\n            </div>\r\n            <div className={ style.container }>\r\n                <h1>Create new Password</h1>\r\n                <Input type={ \"password\" }\r\n                       placeholder={ \"Enter new password\" }\r\n                       onChangeText={ onChange }\r\n                       value={ password }/>\r\n                <Input type={ \"password\" }\r\n                       placeholder={ \"Confirm new password\" }\r\n                       onChangeText={ onChangeConfirmPass }\r\n                       value={ confirmPass } error={ error }/>\r\n                <Button onClick={ onSubmit } disabled={ isFetching }>Create new password</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype PropsType = {\r\n    onChange: (value: string) => void\r\n    password: string\r\n    error: string | null\r\n    onSubmit: () => void\r\n    isFetching: boolean\r\n    confirmPass: string\r\n    onChangeConfirmPass: (value: string) => void\r\n    setNewPassword: boolean\r\n}","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { newPassword, setError } from \"../../../../../bll/passwordRecoverReducer\";\r\nimport { AppRootStoreType } from \"../../../../../bll/Store\";\r\nimport { NewPassword } from \"./NewPassword\";\r\n\r\n\r\nexport const NewPasswordContainer = () => {\r\n\r\n    const { token } = useParams<\"token\">();\r\n    const [pass, setPass] = useState<string>('');\r\n    const [confirmPass, setConfirmPass] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const error = useSelector<AppRootStoreType, string | null>(state => state.recovery.error);\r\n    const isFetching = useSelector<AppRootStoreType, boolean>(state => state.recovery.isFetching);\r\n    const setNewPassword = useSelector<AppRootStoreType, boolean>(state => state.recovery.setNewPassword);\r\n\r\n    const onSubmit = () => {\r\n        if(pass !== confirmPass) {\r\n            dispatch(setError('passwords must be match'))\r\n        } else {\r\n            dispatch(newPassword(pass, token || ''))\r\n        }\r\n    }\r\n\r\n    const onChangePass = (value: string) => {\r\n        setPass(value)\r\n    }\r\n    const onChangeConfirmPass = (value: string) => {\r\n        setConfirmPass(value)\r\n    }\r\n\r\n    return <NewPassword onChange={ onChangePass }\r\n                        password={ pass }\r\n                        confirmPass={ confirmPass }\r\n                        error={ error }\r\n                        onSubmit={ onSubmit }\r\n                        isFetching={ isFetching }\r\n                        onChangeConfirmPass={ onChangeConfirmPass }\r\n                        setNewPassword={setNewPassword}/>\r\n}","import { Route, Routes } from \"react-router-dom\";\r\nimport { Login } from \"./Login/Login\";\r\nimport { Profile } from \"./Profile/Profile\";\r\nimport { SignUpContainer} from \"../features/authorization/signUp/SignUpContainer\";\r\nimport { Test } from \"./Test/Test\";\r\nimport { Error } from \"./Error\"\r\nimport { PasswordRestoreContainer } from \"../features/authorization/forgot/ui/PasswordRestore/PasswordRestoreContainer\";\r\nimport { NewPasswordContainer } from \"../features/authorization/forgot/ui/NewPassword/NewPasswordContainer\";\r\n\r\nexport const PATH = {\r\n    LOGIN: \"login\",\r\n    PROFILE: \"profile\",\r\n    SIGN_UP: \"signup\",\r\n    PASSWORD_RESTORE: 'restore',\r\n    NEW_PASSWORD: 'set-new-password/:token',\r\n    TEST: 'test',\r\n}\r\n\r\nexport const Routing = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={ \"/\" } element={ <Login/> }/>\r\n            <Route path={ PATH.PROFILE } element={ <Profile/> }/>\r\n            <Route path={ PATH.SIGN_UP } element={ <SignUpContainer/> }/>\r\n            <Route path={ PATH.PASSWORD_RESTORE } element={ <PasswordRestoreContainer/> }/>\r\n            <Route path={ PATH.NEW_PASSWORD } element={ <NewPasswordContainer/> }/>\r\n            <Route path={ PATH.TEST } element={ <Test/> }/>\r\n            <Route path={ PATH.LOGIN } element={ <Login/> }/>\r\n            <Route path=\"*\" element={ <Error/> }/>\r\n        </Routes>\r\n    )\r\n}\r\n\r\n//","import { PATH } from \"../Routes\";\r\n\r\nexport const sidebarData = [\r\n    {\r\n        title: \"Profile\",\r\n        path:  PATH.PROFILE,\r\n    },\r\n    {\r\n        title: \"SignUp\",\r\n        path:  PATH.SIGN_UP,\r\n    },\r\n    {\r\n        title: \"Restore Password\",\r\n        path:  PATH.PASSWORD_RESTORE,\r\n    },\r\n    {\r\n        title: \"New password\",\r\n        path:  PATH.NEW_PASSWORD,\r\n    },\r\n    {\r\n        title: \"Test\",\r\n        path:  PATH.TEST,\r\n    },\r\n]","import style from \"./Navbar.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport * as FaIcons from \"react-icons/fa\";\r\nimport * as AiIcons from \"react-icons/ai\";\r\nimport { useState } from \"react\";\r\nimport { sidebarData } from \"./sidebarData\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStoreType } from \"../../bll/Store\";\r\nimport { logout } from \"../../bll/loginReducer\";\r\n\r\nexport const Navbar = () => {\r\n    const [sidebar, setSidebar] = useState<boolean>(false)\r\n    const isLoggedIn = useSelector<AppRootStoreType, boolean>(state => state.loginReducer.isLogged)\r\n    const dispatch = useDispatch();\r\n\r\n    const showSidebar = () => {\r\n        setSidebar(!sidebar)\r\n    }\r\n\r\n    const logoutHandle = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return <>\r\n        <div className={ style.navbar }>\r\n            <NavLink to=\"#\" className={ style.menuBars }>\r\n                <FaIcons.FaBars onClick={ showSidebar }/>\r\n            </NavLink>\r\n            {isLoggedIn ? <a className={ style.login } onClick={logoutHandle}>\r\n                logout\r\n            </a> : <NavLink to=\"/login\" className={ style.login }>Login</NavLink>}\r\n\r\n        </div>\r\n        <nav\r\n            className={ sidebar ? `${ style['navMenu'] } ${ style['active'] }` : style['navMenu'] }>\r\n            <ul className={ style.navMenuItems } onClick={ showSidebar }>\r\n                <li className={ style.navbarToggle }>\r\n                    <NavLink to=\"#\" className={ style.menuBars }>\r\n                        <AiIcons.AiOutlineClose/>\r\n                    </NavLink>\r\n                </li>\r\n                { sidebarData.map((item, index) => {\r\n                    return (\r\n                        <li key={ index } className={ style.navText }>\r\n                            <NavLink to={ item.path }>\r\n                                <span>{ item.title }</span>\r\n                            </NavLink>\r\n                        </li>\r\n                    );\r\n                }) }\r\n            </ul>\r\n        </nav>\r\n    </>\r\n}","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport { Routing } from \"./components/Routes\";\r\nimport { Navbar } from \"./components/Navbar/Navbar\";\r\nimport { authMe } from \"../src/bll/loginReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n\r\nexport const App = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=> {\r\n        dispatch(authMe())\r\n    },[])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Navbar/>\r\n            <Routing/>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState: InitialStateType = {}\r\n\r\nexport const firstReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case\"SOME_ACTION\": {\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const someAC = () => {\r\n    return { type: \"SOME_ACTION\", payload: {} } as const\r\n}\r\n\r\ntype SomeACType = ReturnType<typeof someAC>\r\ntype InitialStateType = {}\r\ntype ActionType = SomeACType","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { firstReducer } from \"./FirstReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { loginReducer } from \"./loginReducer\";\r\nimport { profileReducer } from \"./profileReducer\";\r\nimport { passwordRecoverReducer } from \"./passwordRecoverReducer\";\r\nimport { signUpReducer } from \"./signUpReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    firstReducer,\r\n    loginReducer,\r\n    profileReducer,\r\n    recovery: passwordRecoverReducer,\r\n    registration: signUpReducer,\r\n})\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport type AppRootStoreType = ReturnType<typeof reducers>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./bll/Store\";\r\n\r\n\r\n//comment\r\nReactDOM.render(\r\n    <Provider store={ store }>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}