{"version":3,"sources":["components/Login/Login.module.css","components/common/Navbar/Navbar.module.css","features/authorization/forgot/ui/PasswordRestore/Restore.module.css","components/common/Input/Input.module.css","components/Test/Test.module.css","features/Packs/Table.module.css","features/authorization/forgot/ui/NewPassword/NewPassword.module.css","components/common/Paginator/Paginator.module.css","components/Search/Search.module.css","components/common/Button/Button.module.css","components/common/Checkbox/Checkbox.module.css","features/authorization/forgot/ui/SendEmail/SendEmail.module.css","components/common/Select/SuperSelect.module.css","bll/profileReducer.ts","bll/loginReducer.ts","dal/apiConfing/apiConfing.tsx","components/Login/Login.tsx","components/Profile/Profile.tsx","components/common/Input/Input.tsx","components/common/Button/Button.tsx","features/authorization/signUp/SignUp.tsx","features/authorization/forgot/dal/ForgotApi.ts","bll/passwordRecoverReducer.ts","bll/signUpReducer.ts","features/authorization/signUp/SignUpContainer.tsx","components/common/Checkbox/Checkbox.tsx","components/Test/Test.tsx","components/Error.tsx","features/authorization/forgot/ui/SendEmail/SendEmail.tsx","features/authorization/forgot/ui/PasswordRestore/Restore.tsx","features/authorization/forgot/ui/PasswordRestore/PasswordRestoreContainer.tsx","features/authorization/forgot/ui/NewPassword/NewPassword.tsx","features/authorization/forgot/ui/NewPassword/NewPasswordContainer.tsx","features/Packs/CardPack/CardPack.tsx","components/common/Select/SuperSelect.tsx","features/Packs/bll/CardPacksActions.ts","components/common/Paginator/Paginator.tsx","components/Sorting/Sorting.tsx","components/common/DoubleRange/DoubleRange.tsx","components/Search/Search.tsx","features/Packs/dal/CardPacksAPI.ts","features/Packs/bll/CardPacksThunk.ts","features/Packs/Table.tsx","features/Cards/Card/Card.tsx","features/Cards/dal/CardsAPI.ts","features/Cards/bll/cardsThunks.ts","features/Cards/bll/cardsActions.ts","features/Cards/CardsTable.tsx","components/Routes.tsx","components/common/Navbar/sidebarData.ts","components/common/Navbar/Navbar.tsx","App.tsx","reportWebVitals.ts","bll/FirstReducer.ts","features/Packs/bll/CardPacksReducer.ts","features/Cards/bll/cardsReducer.ts","bll/Store.ts","index.tsx"],"names":["module","exports","initialState","user","_id","email","name","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","error","avatar","setUser","userData","type","isLogged","loginTC","password","dispatch","authAPI","login","then","response","data","loggingInAC","catch","loginFailAC","instance","axios","create","baseURL","withCredentials","post","me","logout","delete","Login","useDispatch","useState","setEmail","setPassword","errorShow","setErrorShow","useSelector","state","loginReducer","to","onLoginButtonClick","a","className","styles","loginPage","formWrapper","pageTitle","signIn","label","value","onChange","e","text","currentTarget","input","forgot","onClick","button","dontHaveAcc","signUp","Profile","profileReducer","style","width","height","src","alt","SuperInputText","onChangeText","onKeyPress","onEnter","restProps","spanClassName","finalInputClassName","errorInput","key","SuperButton","SignUp","props","onChangeEmail","onChangePassword","onClickHandler","isFetching","loading","container","placeholder","Button","disabled","registrationAPI","from","message","setNewPassword","sendEmail","payload","setError","isRegistrationSuccessful","toggleIsFetching","SignUpContainer","registration","test","length","err","finally","signUpTC","SuperCheckbox","onChangeChecked","children","checked","checkbox","Test","setText","testContainer","inputContainer","Input","buttonContainer","checkboxContainer","Checkbox","Error","SendEmail","Restore","loadingBox","PasswordRestoreContainer","recovery","res","console","log","recoverTC","NewPassword","onSubmit","confirmPass","onChangeConfirmPass","NewPasswordContainer","token","useParams","pass","setPass","setConfirmPass","resetPasswordToken","newPassword","CardPack","cardPack","userId","st","cardsCount","user_name","user_id","deleteCardPack","editCardPack","SuperSelect","options","onChangeOption","mappedOptions","map","o","i","select","setTotalItemsCount","totalItemsCount","getSorting","item","Paginator","currentPage","pageSize","pageItems","portionNumber","setPortionNumber","setValue","pagesCount","Math","ceil","pages","push","portionCount","leftPortionPageNumber","rightPortionPageNumber","paginator","items","pageCount","filter","p","m","selectedPage","pageNumber","page","setCurrentPageAC","Sorting","sortName","DoubleRange","onChangeRange","Slider","min","max","Search","memo","defaultMin","defaultMax","search","setSearch","value1","setValue1","value2","setValue2","searchBox","range","display","values","Array","isArray","marginLeft","setMinItemsCount","toString","setMaxItemsCount","cardPacksAPI","sortPacks","packName","get","params","id","cardsPack","put","getCardPacksTC","getState","cardPacks","cards","cardPacksTotalCount","Table","loggedIn","minCardsCount","maxCardsCount","useEffect","deleteCardPackTC","updateCardPackTC","s","table","Card","card","deleteCard","getUpdateCard","question","answer","grade","cardsAPI","cardsPack_id","sortCards","cardQuestion","getCardsTC","cardsTotalCount","CardsTable","maxGradeCount","minGradeCount","deleteCardTC","updateCard","updateCardTC","createCardTC","PATH","Routing","path","element","sidebarData","title","Navbar","sidebar","setSidebar","isLoggedIn","showSidebar","navbar","menuBars","navMenuItems","navbarToggle","index","navText","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","firstReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af26156a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__2jcyA\",\"formWrapper\":\"Login_formWrapper__3ERhL\",\"pageTitle\":\"Login_pageTitle__3E-SO\",\"signIn\":\"Login_signIn__3jPzg\",\"label\":\"Login_label__1s3a7\",\"button\":\"Login_button__uA5Yx\",\"error\":\"Login_error__1mrmE\",\"input\":\"Login_input__G5yYG\",\"forgot\":\"Login_forgot__2d_bW\",\"dontHaveAcc\":\"Login_dontHaveAcc__2dXcu\",\"signUp\":\"Login_signUp__2eaHN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__21QFe\",\"menuBars\":\"Navbar_menuBars__h3Qp1\",\"navMenu\":\"Navbar_navMenu__2X-p2\",\"active\":\"Navbar_active__2r2yG\",\"navText\":\"Navbar_navText__3ZmZe\",\"navMenuItems\":\"Navbar_navMenuItems__3qWio\",\"navbarToggle\":\"Navbar_navbarToggle__2Cspy\",\"login\":\"Navbar_login__1WSzj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Restore_container__37OMl\",\"loading\":\"Restore_loading__31Hvd\",\"loadingBox\":\"Restore_loadingBox__1VDbG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1oXgu\",\"errorInput\":\"Input_errorInput___I17O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testContainer\":\"Test_testContainer__2Lcud\",\"inputContainer\":\"Test_inputContainer__-fbwL\",\"buttonContainer\":\"Test_buttonContainer__1RDjH\",\"checkboxContainer\":\"Test_checkboxContainer__y5A1z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__1bqXa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NewPassword_container__22MQ8\",\"loading\":\"NewPassword_loading__3p99U\",\"loadingBox\":\"NewPassword_loadingBox__2sRvj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1_B6B\",\"pageNumber\":\"Paginator_pageNumber__69mfW\",\"selectedPage\":\"Paginator_selectedPage__3bRKd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBox\":\"Search_searchBox__2RdOU\",\"range\":\"Search_range__1P30X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2yWGJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__XS00m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SendEmail_container__1cIeP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperSelect_select__1DbUs\"};","let initialState : InitialStateType = {\r\n    user: {\r\n        _id: \"fake_ID\",\r\n        email: \"here is my email\",\r\n        name: \"What for do i need a name , i have id\",\r\n        publicCardPacksCount: 0,\r\n        created: null,\r\n        updated: null,\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n        error: \"no errors\",\r\n        avatar: \"some link will be here\"\r\n    },\r\n\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER\": {\r\n            return {...state, user : {...action.userData}}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setUser = (userData: UserType) => ({\r\n    type: \"SET_USER\",\r\n    userData\r\n} as const)\r\n\r\n//TYPES\r\n\r\nexport type UserType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date | null;\r\n    updated: Date | null;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error?: string;\r\n}\r\ntype InitialStateType = {\r\n    user : UserType\r\n}\r\ntype randomProfileActionsActionType = ReturnType<typeof setUser>\r\ntype ActionType = randomProfileActionsActionType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../components/Login/Login\";\r\nimport {setUser} from \"./profileReducer\";\r\n\r\nlet initialState: authReducerStateType = {\r\n    isLogged: false,\r\n    error: \"\",\r\n}\r\n\r\nexport const loginReducer = (state = initialState, action: UnionActionType_LOGIN_REDUCER): authReducerStateType => {\r\n    switch (action.type) {\r\n        case \"LOGGING_IN\":{\r\n            return {...state,isLogged : action.isLogged}\r\n        }\r\n        case \"LOGIN_FAILED\":{\r\n            return {...state,error : action.error}\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\n//THUNKS\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.login(email, password, rememberMe)\r\n            .then((response) => {\r\n                if(response.data._id){\r\n                    dispatch(loggingInAC(true))\r\n                    dispatch(setUser(response.data))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                dispatch(loginFailAC(error.response.error))\r\n            })\r\n    }\r\n}\r\n\r\nexport const authMe = () => (dispatch:Dispatch) => {\r\n    authAPI.me()\r\n        .then(res=> {\r\n            dispatch(loggingInAC(true))\r\n            dispatch(setUser(res.data))\r\n        })\r\n        .catch(()=> {\r\n            dispatch(loggingInAC(false))\r\n        })\r\n}\r\n\r\nexport const logout = () => (dispatch:Dispatch) => {\r\n    authAPI.logout()\r\n        .then((res)=> {\r\n            dispatch(loggingInAC(false))\r\n        })\r\n}\r\n\r\n// ACTION CREATORS\r\nconst loginFailAC = (error: string) => ({\r\n    type: \"LOGIN_FAILED\",\r\n    error\r\n}as const)\r\n\r\nconst loggingInAC = (isLogged: boolean) => ({\r\n    type: \"LOGGING_IN\",\r\n    isLogged\r\n}as const)\r\n\r\n//TYPES\r\n\r\ntype authReducerStateType = {\r\n    isLogged: boolean\r\n    error: string\r\n}\r\n\r\ntype UnionActionType_LOGIN_REDUCER = LoginFailActionType | LoggingInActionType\r\n\r\ntype LoginFailActionType = ReturnType<typeof loginFailAC>\r\ntype LoggingInActionType = ReturnType<typeof loggingInAC>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    // baseURL: \"http://localhost:7542/2.0/\",\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    withCredentials: true\r\n})\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginTC } from \"bll/loginReducer\";\r\nimport { AppRootStoreType } from \"bll/Store\";\r\nimport { Navigate, NavLink } from \"react-router-dom\";\r\nimport styles from \"./Login.module.css\"\r\nimport { instance } from \"dal/apiConfing/apiConfing\";\r\n\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    me(){\r\n        return instance.post(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`)\r\n    }\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    let [email, setEmail] = useState(\"nya-admin@nya.nya1\") //nya-admin@nya.nya\r\n    let [password, setPassword] = useState(\"1qazxcvBG\") // 1qazxcvBG\r\n    let [rememberMe, setRememberMe] = useState(true)\r\n    let [errorShow, setErrorShow] = useState(false)\r\n\r\n    const isLogged = useSelector<AppRootStoreType, boolean>(state => state.loginReducer.isLogged)\r\n    const error = useSelector<AppRootStoreType, string>(state => state.loginReducer.error)\r\n\r\n    if (isLogged) {\r\n        return <Navigate to=\"/profile\"/>;\r\n    }\r\n\r\n    const onEmailChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorShow(false)\r\n        let text = e.currentTarget.value\r\n        setEmail(text)\r\n    }\r\n    const onPasswordChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorShow(false)\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n    const onLoginButtonClick = async () => {\r\n        dispatch(loginTC(email, password, rememberMe))\r\n        setErrorShow(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.loginPage}>\r\n            <form className={styles.formWrapper}>\r\n                <h1 className={styles.pageTitle}>It-incubator</h1>\r\n                <h2 className={styles.signIn}>Sign In</h2>\r\n                <span className={styles.label}>Email</span>\r\n                <input value={email}\r\n                       onChange={onEmailChangeHandler}\r\n                       className={styles.input}\r\n                />\r\n                {/*email*/}\r\n\r\n                <span className={styles.label}>Password</span>\r\n                <input value={password}\r\n                       type=\"password\"\r\n                       onChange={onPasswordChangeHandler}\r\n                       className={styles.input}\r\n                />\r\n                {/*password*/}\r\n\r\n\r\n                <NavLink to={\"/restore\"} className={styles.forgot}>Forgot Password</NavLink>\r\n\r\n                {errorShow ? <>\r\n                        {error && <span className={styles.error}>{error}</span>}\r\n                    </> :\r\n                    <button onClick={onLoginButtonClick}\r\n                            className={styles.button}>Login\r\n                    </button>}\r\n\r\n                {/*Button Loggin or show error */}\r\n\r\n\r\n                <span className={styles.dontHaveAcc}>Don’t have an account?</span>\r\n                <NavLink to={\"/signup\"} className={styles.signUp}>Sign Up</NavLink>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppRootStoreType } from \"bll/Store\";\r\nimport { UserType } from \"bll/profileReducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport const Profile = () => {\r\n\r\n    let user = useSelector<AppRootStoreType, UserType>(state => state.profileReducer.user)\r\n    const loggedIn = useSelector<AppRootStoreType, boolean>(state => state.loginReducer.isLogged)\r\n\r\n    const style = {\r\n        width: \"200px\",\r\n        height: \"200px\",\r\n    }\r\n\r\n    if(!loggedIn) {\r\n        return <Navigate to={ \"/login\" }/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span>{ user.name }</span>\r\n            <img style={ style } src={ user.avatar } alt=\"user avatar\"/>\r\n        </div>\r\n    )\r\n}","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent } from \"react\"\r\nimport style from \"./Input.module.css\"\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string | null\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    },\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalInputClassName = `${ style.input } ${ error ? style.errorInput : style.input }`\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                onChange={ onChangeCallback }\r\n                onKeyPress={ onKeyPressCallback }\r\n                className={ style.input }\r\n\r\n                { ...restProps } // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            { error && <span className={ finalInputClassName }>{ error }</span> }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\"\r\nimport style from \"./Button.module.css\"\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = ({ className, ...restProps }) => {\r\n\r\n    return (\r\n        <button\r\n            className={ style.button }\r\n            { ...restProps } // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import style from \"../forgot/ui/PasswordRestore/Restore.module.css\";\r\nimport SuperInputText from \"../../../components/common/Input/Input\";\r\nimport Button from \"../../../components/common/Button/Button\";\r\n\r\nexport const SignUp = (props: PropsType) => {\r\n\r\n    const {\r\n        email, onChangeEmail, error,\r\n        password, onChangePassword,\r\n        onClickHandler, isFetching,\r\n    } = props\r\n\r\n    return (\r\n        <div>\r\n            { isFetching ? <span className={ style.loading }>loading</span>\r\n                : <div className={ style.container }>\r\n                    <h1>Sign Up</h1>\r\n                    <SuperInputText type={ \"email\" }\r\n                                    placeholder={ \"Enter Email\" }\r\n                                    onChangeText={ onChangeEmail }\r\n                                    value={ email }/>\r\n                    <SuperInputText type={ \"password\" }\r\n                                    placeholder={ \"Enter Password\" }\r\n                                    onChangeText={ onChangePassword }\r\n                                    value={ password }\r\n                                    error={ error }/>\r\n                    <Button onClick={ onClickHandler }\r\n                            disabled={ isFetching }>Register</Button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    email: string\r\n    onChangeEmail: (value: string) => void\r\n    // emailError: null | string\r\n    password: string\r\n    onChangePassword: (value: string) => void\r\n    // passwordError: null | string\r\n    isFetching: boolean\r\n    onClickHandler: () => void\r\n    error: null | string\r\n}","import axios, { AxiosResponse } from \"axios\";\r\nimport { instance } from \"dal/apiConfing/apiConfing\";\r\n\r\nconst from = \"test-front-admin <viktorburnyshev@gmail.com\"\r\n\r\nconst message = \"\\n<div style=\\\"background-color: #520a27; padding: 15px\\\">\\npassword recovery link: \\n<a href='http://localhost:3000/#/set-new-password/$token$'>link</a>\\n</div>\\n\"\r\n\r\nexport const registrationAPI = {\r\n    forgot(email: string) {\r\n        return axios.post<RequestForgotType, AxiosResponse<ForgotResponseType>>(`https://neko-back.herokuapp.com/2.0/auth/forgot/`, {\r\n            email,\r\n            from,\r\n            message,\r\n        })\r\n    },\r\n    newPassword(data: NewPasswordRequestType) {\r\n        return instance.post(`auth/set-new-password/`, data)\r\n    },\r\n    signUp(email: string, password: string) {\r\n        return instance.post(`auth/register`, { email, password })\r\n    },\r\n}\r\n\r\n//types\r\ntype ForgotResponseType = {\r\n    info: string,\r\n    error: string,\r\n}\r\nexport type NewPasswordRequestType = {\r\n    password: string,\r\n    resetPasswordToken: string,\r\n}\r\ntype RequestForgotType = {\r\n    from: string,\r\n    email: string,\r\n    message: string\r\n}\r\n","import { Dispatch } from \"redux\"\r\nimport { registrationAPI } from \"../features/authorization/forgot/dal/ForgotApi\"\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    error: null as null | string,\r\n    setNewPassword: false,\r\n    sendEmail: false,\r\n}\r\n\r\nexport const passwordRecoverReducer =\r\n    (state = initialState, action: passwordRecoverActionTypes): InitialStateType => {\r\n        switch (action.type) {\r\n            case \"RECOVER/IS_FETCHING\":\r\n            case \"RECOVERY/ERROR\":\r\n                return { ...state, ...action.payload }\r\n            case \"RECOVERY/SET_NEW_PASSWORD\":\r\n                return { ...state, setNewPassword: true }\r\n            case \"RECOVERY/SEND_EMAIL\":\r\n                return { ...state, sendEmail: true }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n//actions\r\nexport const isFetching = (isFetching: boolean) => ( {\r\n    type: \"RECOVER/IS_FETCHING\",\r\n    payload: { isFetching },\r\n} as const );\r\nexport const setError = (error: null | string) => ( { type: \"RECOVERY/ERROR\", payload: { error } } as const );\r\nexport const setNewPassword = () => ( { type: \"RECOVERY/SET_NEW_PASSWORD\" } as const );\r\nexport const sendEmail = () => ( { type: \"RECOVERY/SEND_EMAIL\" } as const );\r\n\r\n//thunk\r\nexport const recoverTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(isFetching(true))\r\n    registrationAPI.forgot(email)\r\n        .then(res => {\r\n            console.log(res.data)\r\n            dispatch(sendEmail())\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : ( e.message + \", more details in the console\" )\r\n            dispatch(setError(error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(isFetching(false))\r\n        })\r\n}\r\n\r\nexport const newPassword = (password: string, token: string) => (dispatch: Dispatch) => {\r\n    dispatch(isFetching(true))\r\n    registrationAPI.newPassword({ password, resetPasswordToken: token })\r\n        .then(res => {\r\n            dispatch(setNewPassword())\r\n            dispatch(setError(''))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : \"Some Error\"\r\n            dispatch(setError(error))\r\n            console.log(error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(isFetching(false))\r\n        })\r\n}\r\n\r\n//types\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type SetErrorType = ReturnType<typeof setError>\r\ntype passwordRecoverActionTypes = ReturnType<typeof isFetching>\r\n    | ReturnType<typeof setNewPassword>\r\n    | ReturnType<typeof sendEmail>\r\n    | SetErrorType","import { Dispatch } from \"redux\"\r\nimport { registrationAPI } from \"../features/authorization/forgot/dal/ForgotApi\"\r\nimport { setError, SetErrorType } from \"./passwordRecoverReducer\";\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    // emailError: null as null | string,\r\n    // passwordError: null as null | string,\r\n    error: null as null | string,\r\n    isRegistrationSuccessful: false,\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const signUpReducer =\r\n    (state = initialState, action: RegistrationActionTypes): InitialStateType => {\r\n        switch (action.type) {\r\n            case \"REGISTRATION/ISFETCHING\":\r\n                return { ...state, isFetching: action.isFetching }\r\n            case \"RECOVERY/ERROR\":\r\n                return { ...state, error: action.payload.error }\r\n            // case \"REGISTRATION/EMAILERROR\":\r\n            //     return { ...state, emailError: action.error }\r\n            // case \"REGISTRATION/PASSWORDERROR\":\r\n            //     return { ...state, passwordError: action.error }\r\n            case \"REGISTRATION/ISREGISTRATIONSUCCESSFUL\":\r\n                return {\r\n                    ...state,\r\n                    isRegistrationSuccessful: action.isRegistrationSuccessful,\r\n                }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => ( {\r\n    type: \"REGISTRATION/ISFETCHING\",\r\n    isFetching,\r\n} as const );\r\nexport const toggleIsRegistrationSuccessful = (isRegistrationSuccessful: boolean) => ( {\r\n    type: \"REGISTRATION/ISREGISTRATIONSUCCESSFUL\",\r\n    isRegistrationSuccessful,\r\n} as const );\r\n// export const setEmailError = (error: null | string) => ( {\r\n//     type: \"REGISTRATION/EMAILERROR\",\r\n//     error,\r\n// } as const );\r\n// export const setPasswordError = (error: null | string) => ( {\r\n//     type: \"REGISTRATION/PASSWORDERROR\",\r\n//     error,\r\n// } as const );\r\n\r\n\r\nexport const signUpTC = (email: string, password: string) => (dispatch: Dispatch<RegistrationActionTypes>) => {\r\n    dispatch(toggleIsFetching(true))\r\n    registrationAPI.signUp(email, password)\r\n        .then(() => {\r\n            dispatch(toggleIsRegistrationSuccessful(true))\r\n        })\r\n        .catch((err) => {\r\n            dispatch(setError(err.response.data.error))\r\n        })\r\n        .finally(() => {\r\n            dispatch(toggleIsFetching(false))\r\n        })\r\n}\r\n\r\ntype RegistrationActionTypes = ReturnType<typeof toggleIsFetching>\r\n    // | ReturnType<typeof setEmailError>\r\n    // | ReturnType<typeof setPasswordError>\r\n    | ReturnType<typeof toggleIsRegistrationSuccessful>\r\n    | SetErrorType\r\n","import { SignUp } from \"./SignUp\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStoreType } from \"../../../bll/Store\";\r\nimport { signUpTC } from \"../../../bll/signUpReducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { setError } from \"../../../bll/passwordRecoverReducer\";\r\n\r\n\r\nexport const SignUpContainer = () => {\r\n\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n\r\n    const error = useSelector<AppRootStoreType, null | string>(state => state.registration.error)\r\n    // const emailError = useSelector<AppRootStoreType, null | string>(state => state.registration.emailError)\r\n    // const passwordError = useSelector<AppRootStoreType, null | string>(state => state.registration.passwordError)\r\n    const isFetching = useSelector<AppRootStoreType, boolean>(state => state.registration.isFetching)\r\n    const isRegistrationSuccessful = useSelector<AppRootStoreType, boolean>(state => state.registration.isRegistrationSuccessful)\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeEmail = (value: string) => {\r\n        setEmail(value)\r\n        dispatch(setError(null))\r\n    }\r\n    const onChangePassword = (value: string) => {\r\n        setPassword(value)\r\n        dispatch(setError(null))\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n\r\n        if(email === '') {\r\n            dispatch(setError('Required'))\r\n        } else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n            dispatch(setError('Invalid email address'))\r\n            return\r\n        }\r\n\r\n        if(password.length < 7) {\r\n            dispatch(setError('Password should be more than 7 characters'))\r\n        }\r\n\r\n        if(!error) {\r\n            dispatch(signUpTC(email, password))\r\n        }\r\n    }\r\n\r\n    if(isRegistrationSuccessful) {\r\n        return <Navigate to={ \"/\" }/>\r\n    }\r\n\r\n    return (\r\n        <SignUp email={ email }\r\n                onChangeEmail={ onChangeEmail }\r\n            // emailError={emailError}\r\n                password={ password }\r\n                onChangePassword={ onChangePassword }\r\n            // passwordError={passwordError}\r\n                isFetching={ isFetching }\r\n                onClickHandler={ onClickHandler }\r\n                error={ error }/>\r\n    )\r\n}","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes } from \"react\"\r\nimport style from \"./Checkbox.module.css\"\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    },\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={ 'checkbox' }\r\n                onChange={ onChangeCallback }\r\n                className={ style.checkbox }\r\n\r\n                { ...restProps } // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import Input from \"../common/Input/Input\";\r\nimport Button from \"../common/Button/Button\";\r\nimport Checkbox from \"../common/Checkbox/Checkbox\";\r\nimport style from \"./Test.module.css\";\r\nimport { useState } from \"react\";\r\n\r\nexport const Test = () => {\r\n    const [text, setText] = useState<string>(\"\")\r\n    const error = text ? '' : \"error\"\r\n\r\n    return (\r\n        <div className={ style.testContainer }>\r\n            <div className={ style.inputContainer }>\r\n                <span>Input Example</span>\r\n                <Input onChangeText={ setText }\r\n                       value={ text }\r\n                       error={ error }/>\r\n            </div>\r\n            <div className={ style.buttonContainer }>\r\n                <span>Button Example</span>\r\n                <Button>Test</Button>\r\n            </div>\r\n            <div className={ style.checkboxContainer }>\r\n                <span>Checkbox Example</span>\r\n                <Checkbox/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","export const Error = () => {\r\n    return <div>Error</div>\r\n}","import style from \"./SendEmail.module.css\"\r\n\r\nexport const SendEmail = () => {\r\n    return (\r\n        <div className={style.container}>\r\n            <h1>Check email</h1>\r\n\r\n            <h4>We've sent an Email with instructions to your Email</h4>\r\n        </div>\r\n    )\r\n}","import Input from \"../../../../../components/common/Input/Input\";\r\nimport Button from \"../../../../../components/common/Button/Button\";\r\nimport style from \"./Restore.module.css\"\r\nimport { SendEmail } from \"../SendEmail/SendEmail\";\r\n\r\n\r\nexport const Restore = (props: PropsType) => {\r\n\r\n    const {\r\n        email,\r\n        error,\r\n        onChangeText,\r\n        onClickHandler,\r\n        isFetching,\r\n        sendEmail,\r\n    } = props\r\n\r\n    return (\r\n        <div>\r\n            <div className={ style.loadingBox }>\r\n                { isFetching ? <span className={ style.loading }>loading</span> : '' }\r\n            </div>\r\n            { !sendEmail ?\r\n                <div className={ style.container }>\r\n                    <h1>Forgot your password ?</h1>\r\n                    <Input type={ \"email\" }\r\n                           placeholder={ \"Enter Email\" }\r\n                           onChangeText={ onChangeText }\r\n                           value={ email }\r\n                           error={ error }/>\r\n                    <h5>Enter your email address and we will send you further\r\n                        instructions</h5>\r\n                    <Button onClick={ onClickHandler } disabled={ isFetching }>Send</Button>\r\n                </div>\r\n                : <SendEmail/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype PropsType = {\r\n    email: string\r\n    error: null | string\r\n    onChangeText: (value: string) => void\r\n    onClickHandler: () => void\r\n    isFetching: boolean\r\n    sendEmail: boolean\r\n}","import { Restore } from \"./Restore\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStoreType } from \"../../../../../bll/Store\";\r\nimport { recoverTC, setError } from \"../../../../../bll/passwordRecoverReducer\";\r\n\r\nexport const PasswordRestoreContainer = () => {\r\n\r\n    const [email, setEmail] = useState<string>('')\r\n\r\n    const error = useSelector<AppRootStoreType, null | string>(state => state.recovery.error)\r\n    const isFetching = useSelector<AppRootStoreType, boolean>(state => state.recovery.isFetching)\r\n    const sendEmail = useSelector<AppRootStoreType, boolean>(state => state.recovery.sendEmail)\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeEmail = (value: string) => {\r\n        setEmail(value)\r\n        if(error !== null) {\r\n            dispatch(setError(error))\r\n        }\r\n        dispatch(setError(null))\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n        if(email === '') {\r\n            dispatch(setError('Required'))\r\n        }\r\n        if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n            dispatch(setError('Invalid email address'))\r\n        } else {\r\n            dispatch(recoverTC(email))\r\n            setEmail('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Restore email={ email }\r\n                 onChangeText={ onChangeEmail }\r\n                 onClickHandler={ onClickHandler }\r\n                 error={ error }\r\n                 isFetching={ isFetching }\r\n                 sendEmail={ sendEmail }/>\r\n    )\r\n}","import SuperInputText from \"../../../../../components/common/Input/Input\";\r\nimport Button from \"../../../../../components/common/Button/Button\";\r\nimport style from \"./NewPassword.module.css\"\r\nimport { Navigate } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nexport const NewPassword = (props: PropsType) => {\r\n\r\n    const {\r\n        onChange, password, error,\r\n        onSubmit, isFetching, confirmPass,\r\n        onChangeConfirmPass, setNewPassword,\r\n    } = props\r\n\r\n    if(setNewPassword) {\r\n        return <Navigate to=\"/login\"/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={ style.loadingBox }>\r\n                { isFetching ? <span className={ style.loading }>Loading</span> : '' }\r\n            </div>\r\n            <div className={ style.container }>\r\n                <h1>Create new Password</h1>\r\n                <SuperInputText type={ \"password\" }\r\n                                placeholder={ \"Enter new password\" }\r\n                                onChangeText={ onChange }\r\n                                value={ password }/>\r\n                <SuperInputText type={ \"password\" }\r\n                                placeholder={ \"Confirm new password\" }\r\n                                onChangeText={ onChangeConfirmPass }\r\n                                value={ confirmPass } error={ error }/>\r\n                <Button onClick={ onSubmit } disabled={ isFetching }>Create new\r\n                    password</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype PropsType = {\r\n    onChange: (value: string) => void\r\n    password: string\r\n    error: string | null\r\n    onSubmit: () => void\r\n    isFetching: boolean\r\n    confirmPass: string\r\n    onChangeConfirmPass: (value: string) => void\r\n    setNewPassword: boolean\r\n}","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { newPassword, setError } from \"../../../../../bll/passwordRecoverReducer\";\r\nimport { AppRootStoreType } from \"../../../../../bll/Store\";\r\nimport { NewPassword } from \"./NewPassword\";\r\n\r\n\r\nexport const NewPasswordContainer = () => {\r\n\r\n    const { token } = useParams<\"token\">();\r\n    const [pass, setPass] = useState<string>('');\r\n    const [confirmPass, setConfirmPass] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const error = useSelector<AppRootStoreType, string | null>(state => state.recovery.error);\r\n    const isFetching = useSelector<AppRootStoreType, boolean>(state => state.recovery.isFetching);\r\n    const setNewPassword = useSelector<AppRootStoreType, boolean>(state => state.recovery.setNewPassword);\r\n\r\n    const onSubmit = () => {\r\n        if(pass !== confirmPass) {\r\n            dispatch(setError('passwords must be match'))\r\n        } else {\r\n            dispatch(newPassword(pass, token || ''))\r\n        }\r\n    }\r\n\r\n    const onChangePass = (value: string) => {\r\n        setPass(value)\r\n        dispatch(setError(null))\r\n    }\r\n    const onChangeConfirmPass = (value: string) => {\r\n        setConfirmPass(value)\r\n    }\r\n\r\n    return <NewPassword onChange={ onChangePass }\r\n                        password={ pass }\r\n                        confirmPass={ confirmPass }\r\n                        error={ error }\r\n                        onSubmit={ onSubmit }\r\n                        isFetching={ isFetching }\r\n                        onChangeConfirmPass={ onChangeConfirmPass }\r\n                        setNewPassword={setNewPassword}/>\r\n}","import Button from \"../../../components/common/Button/Button\";\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { CardPackType } from \"../bll/CardPacksTypes\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStoreType} from \"../../../bll/Store\";\r\n\r\ntype CardPackPropsType = {\r\n    cardPack: CardPackType\r\n    deleteCardPack: (id: string) => void\r\n    editCardPack: (id: string, name: string) => void\r\n}\r\n\r\nexport const CardPack = (props: CardPackPropsType) => {\r\n    const {cardPack} = props;\r\n    const userId=useSelector<AppRootStoreType, string>(st=>st.profileReducer.user._id)\r\n\r\n    const deleteCardPack = () => {\r\n        props.deleteCardPack(cardPack._id)\r\n    }\r\n\r\n    const editCardPack = () => {\r\n        //  захардкодженное имя\r\n        props.editCardPack(cardPack._id, 'ssssss')\r\n    }\r\n\r\n    return <tr>\r\n        <td>{cardPack.name}</td>\r\n        <td>{cardPack.cardsCount}</td>\r\n        <td>{cardPack.updated}</td>\r\n        <td>{cardPack.user_name}</td>\r\n        <td>\r\n          {/*или <Button disabled={cardPack.user_id!==userId} onClick={deleteCardPack}>Delete</Button>*/}\r\n            {cardPack.user_id===userId && <Button onClick={deleteCardPack}>Delete</Button>}\r\n            {cardPack.user_id===userId && <Button onClick={editCardPack}>Edit</Button>}\r\n            <NavLink to={`/card/${cardPack._id}`}>\r\n                <Button>Learn</Button>\r\n            </NavLink>\r\n\r\n        </td>\r\n    </tr>\r\n}","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react'\r\nimport style from './SuperSelect.module.css';\r\n\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\n\r\nexport const SuperSelect: React.FC<SuperSelectPropsType> = (\r\n    {\r\n        options,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const mappedOptions: any[] = options? options.map((o,i)=> (\r\n        <option key={i + '' + o} value={o}>\r\n            {o}\r\n        </option>\r\n    )) : [];\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeOption && onChangeOption(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <select className={style.select} onChange={onChangeCallback} {...restProps}>\r\n            {mappedOptions}\r\n        </select>\r\n    )\r\n}\r\n\r\n","import { CardPackType } from \"./CardPacksTypes\";\r\n\r\nexport const setCardPacks = (cards: Array<CardPackType>) => ( {\r\n    type: \"SET-CARD-PACKS\",\r\n    cards,\r\n} as const )\r\n\r\nexport const setTotalItemsCount = (totalItemsCount: number) => ( {\r\n    type: \"PAGINATOR/SET_TOTAL_ITEMS_COUNT\",\r\n    totalItemsCount,\r\n} as const )\r\n\r\nexport const setCurrentPageAC = (page: number) => ( {\r\n    type: \"PAGINATOR/SET_CURRENT_PAGE\",\r\n    page,\r\n} as const )\r\n\r\nexport const setPageCount = (pageCount: number) => ( {\r\n    type: \"PAGINATOR/SET_PAGE_COUNT\",\r\n    pageCount,\r\n} as const )\r\n\r\nexport const getSorting = (item: any) => ( {\r\n    type: \"SORTING\",\r\n    item,\r\n} as const )\r\n\r\nexport const getSearch = (value: string) => ( {\r\n    type: \"SEARCH\",\r\n    value,\r\n} as const )\r\n\r\nexport const setMinItemsCount = (min: string) => ( {\r\n    type: \"SET_MIN_ITEM_COUNT\",\r\n    min,\r\n} as const )\r\n\r\nexport const setMaxItemsCount = (max: string) => ( {\r\n    type: \"SET_MAX_ITEM_COUNT\",\r\n    max,\r\n} as const )","import style from \"./Paginator.module.css\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { SuperSelect } from \"../Select/SuperSelect\";\r\nimport Button from \"../Button/Button\";\r\nimport {\r\n    setCurrentPageAC,\r\n    setPageCount,\r\n} from \"features/Packs/bll/CardPacksActions\";\r\n\r\nexport const Paginator = ({totalItemsCount, currentPage, pageSize}:PropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const pageItems = [3, 5, 10];\r\n\r\n    const [portionNumber, setPortionNumber] = useState<number>(1)\r\n    const [value, setValue] = useState(pageItems[1])\r\n\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n\r\n    }\r\n    const portionSize = 5\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const leftPortionPageNumber = ( portionNumber - 1 ) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    const onPageChanged = (page: number) => {\r\n        dispatch(setCurrentPageAC(page))\r\n    }\r\n\r\n    const onChangeSelect = (items: 3 | 5 | 10) => {\r\n        dispatch(setPageCount(items))\r\n        setValue(items)\r\n    }\r\n\r\n    return (\r\n        <div className={ style.paginator }>\r\n            { portionNumber > 1 &&\r\n            <Button\r\n                onClick={ () => {setPortionNumber(portionNumber - 1)} }>Left</Button> }\r\n            <SuperSelect options={ pageItems }\r\n                         value={ value }\r\n                         onChangeOption={ onChangeSelect }\r\n            />\r\n            { pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(m =>\r\n                    <span\r\n                        className={ currentPage === m ? style.selectedPage : style.pageNumber }\r\n                        onClick={ () => {onPageChanged(m)} }>\r\n                { m }\r\n            </span>)\r\n            }\r\n            { portionCount > portionNumber &&\r\n            <Button\r\n                onClick={ () => {setPortionNumber(portionNumber + 1)} }>Right</Button> }\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    totalItemsCount:number\r\n    currentPage:number\r\n    pageSize:number\r\n}","import { FC } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getSorting } from \"features/Packs/bll/CardPacksActions\";\r\n\r\nexport const Sorting:FC<PropsType> = ({ sortName }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const setSortUp = ()=> {\r\n        dispatch(getSorting(`0${sortName}`))\r\n    }\r\n    const setSortDown = ()=> {\r\n        dispatch(getSorting(`1${sortName}`))\r\n    }\r\n    return(\r\n        <div>\r\n            <button onClick={setSortUp}>+</button>\r\n            <button onClick={setSortDown}>-</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype PropsType = {\r\n    sortName: string\r\n}\r\n","import React from \"react\"\r\nimport { Slider } from \"@mui/material\";\r\n\r\ntype SuperDoubleRangePropsType = {\r\n    onChangeRange?: (value: number | number[]) => void\r\n    value?: number | number[]\r\n    min:number\r\n    max:number\r\n}\r\n\r\nexport const DoubleRange: React.FC<SuperDoubleRangePropsType> = (\r\n    {\r\n        onChangeRange, value,\r\n        ...restProps\r\n    },\r\n) => {\r\n    const onChangeCallback = (e: Event, value: number | number[]) => {\r\n        onChangeRange && onChangeRange(value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Slider value={ value }\r\n                    min={ restProps.min }\r\n                    max={ restProps.max }\r\n                    style={ { \"width\": \"200px\", \"color\": \"#7676EE7D\" } }\r\n                    onChange={ onChangeCallback }\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n","import SuperInputText from \"../common/Input/Input\"\r\nimport Button from \"../common/Button/Button\";\r\nimport React, { memo, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { DoubleRange } from \"../common/DoubleRange/DoubleRange\";\r\nimport {\r\n    getSearch,\r\n    setMaxItemsCount,\r\n    setMinItemsCount,\r\n} from \"features/Packs/bll/CardPacksActions\";\r\nimport style from \"./Search.module.css\";\r\n\r\nexport const Search = memo(({ min, max, defaultMin, defaultMax }: PropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [search, setSearch] = useState<string>('')\r\n\r\n    const onChangeSearch = (value: string) => {\r\n        setSearch(value)\r\n    }\r\n\r\n    // double range\r\n    const [value1, setValue1] = useState(min)\r\n    const [value2, setValue2] = useState(max)\r\n\r\n\r\n    const onChangeHandler = (values: number | number[]) => {\r\n        if(Array.isArray(values)) {\r\n            setValue1(values[0])\r\n            setValue2(values[1])\r\n        } else {\r\n            setValue1(values)\r\n        }\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        dispatch(getSearch(search))\r\n        dispatch(setMinItemsCount(value1.toString()))\r\n        dispatch(setMaxItemsCount(value2.toString()))\r\n    }\r\n\r\n    return (\r\n        <div className={ style.searchBox }>\r\n            <div className={ style.range } style={ { display: \"flex\" } }>\r\n                <span style={ { width: \"50px\" } }>{ value1 }</span>\r\n                <DoubleRange\r\n                    min={ defaultMin }\r\n                    max={ defaultMax }\r\n                    value={ [value1, value2] }\r\n                    onChangeRange={ onChangeHandler }\r\n                />\r\n                <span style={ { marginLeft: \"5%\" } }>{ value2 }</span>\r\n            </div>\r\n            <SuperInputText value={ search } onChangeText={ onChangeSearch }/>\r\n            <Button onClick={ onSubmit }>Search</Button>\r\n        </div>\r\n    )\r\n})\r\n\r\n//types\r\ntype PropsType = {\r\n    min: number\r\n    max: number\r\n    defaultMin:number\r\n    defaultMax:number\r\n}","import { instance } from \"dal/apiConfing/apiConfing\";\r\nimport { CardsPackResponseType } from \"./CardPackApiTypes\";\r\n// cardPackAPI\r\nexport const cardPacksAPI = {\r\n    getCardPacks(pageCount: number, page: number, sortPacks: string, packName: string, min: string, max: string) {\r\n        return instance.get<CardsPackResponseType>\r\n        (`cards/pack`, { params: { pageCount, page, sortPacks, packName, min, max } })\r\n    },\r\n    deleteCardPack(id: string) {\r\n        return instance.delete(`cards/pack?id=${ id }`)\r\n    },\r\n    createCardPack() {\r\n        return instance.post(`cards/pack`, { cardsPack: { name: 'awesome pack' } })\r\n    },\r\n    updateCardPack(id: string, name: string) {\r\n        return instance.put(`cards/pack`, { cardsPack: { _id: id, name } })\r\n    },\r\n}\r\n\r\n\r\n\r\n","import { AppRootStoreType, AppThunkType } from \"../../../bll/Store\";\r\nimport { setCardPacks, setTotalItemsCount } from \"./CardPacksActions\";\r\nimport { cardPacksAPI } from \"../dal/CardPacksAPI\";\r\n\r\nexport const getCardPacksTC = (): AppThunkType => {\r\n    return (dispatch, getState: () => AppRootStoreType) => {\r\n        const state = getState();\r\n        const { pageCount, page, sortPacks, packName, min, max } = state.cardPacks\r\n        cardPacksAPI.getCardPacks(pageCount, page, sortPacks, packName, min, max)\r\n            .then(res => {\r\n                dispatch(setCardPacks(res.data.cardPacks))\r\n                dispatch(setTotalItemsCount(res.data.cardPacksTotalCount))\r\n            })\r\n            .catch((error) => {\r\n                console.log(error) // just a plug (fix it later)\r\n            })\r\n    }\r\n}\r\n\r\nexport const deleteCardPackTC = (id: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        cardPacksAPI.deleteCardPack(id)\r\n            .then(() => {\r\n                dispatch(getCardPacksTC())\r\n            })\r\n            .catch((error) => {\r\n                console.log(error) // just a plug (fix it later)\r\n            })\r\n    }\r\n}\r\nexport const createCardPackTC = (): AppThunkType => {\r\n    return (dispatch) => {\r\n        cardPacksAPI.createCardPack()\r\n            .then(() => {\r\n                dispatch(getCardPacksTC())\r\n            })\r\n            .catch((error) => {\r\n                console.log(error) // just a plug (fix it later)\r\n            })\r\n    }\r\n}\r\nexport const updateCardPackTC = (id: string, name: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        cardPacksAPI.updateCardPack(id, name)\r\n            .then(() => {\r\n                dispatch(getCardPacksTC())\r\n            })\r\n            .catch((error) => {\r\n                console.log(error) // just a plug (fix it later)\r\n            })\r\n    }\r\n}","import React, { useEffect } from \"react\";\r\nimport s from \"./Table.module.css\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStoreType } from \"bll/Store\";\r\nimport Button from \"../../components/common/Button/Button\";\r\nimport { CardPack } from \"./CardPack/CardPack\";\r\nimport { Paginator } from \"components/common/Paginator/Paginator\";\r\nimport { Sorting } from \"components/Sorting/Sorting\";\r\nimport { Search } from \"components/Search/Search\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport {\r\n    createCardPackTC,\r\n    deleteCardPackTC,\r\n    getCardPacksTC,\r\n    updateCardPackTC,\r\n} from \"./bll/CardPacksThunk\";\r\n\r\nexport const Table = () => {\r\n    const dispatch = useDispatch()\r\n    const loggedIn = useSelector<AppRootStoreType, boolean>(state => state.loginReducer.isLogged)\r\n    const {\r\n        cardPacksTotalCount,\r\n        cardPacks,\r\n        page,\r\n        pageCount,\r\n        sortPacks,\r\n        packName,\r\n        min,\r\n        max,\r\n        minCardsCount,\r\n        maxCardsCount,\r\n    } = useSelector((state:AppRootStoreType)=> state.cardPacks)\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardPacksTC())\r\n    }, [dispatch, page, pageCount, sortPacks, loggedIn, packName, min, max, minCardsCount, maxCardsCount])\r\n\r\n    const deleteCardPack = (id: string) => {\r\n        dispatch(deleteCardPackTC(id))\r\n    }\r\n\r\n    const editCardPack = (id: string, name: string) => {\r\n        dispatch(updateCardPackTC(id, name))\r\n    }\r\n\r\n    const createCardPack = () => {\r\n        dispatch(createCardPackTC())\r\n    }\r\n\r\n    if (!loggedIn) {\r\n        return <Navigate to=\"/login\"/>\r\n    }\r\n\r\n    return ( <>\r\n        <Button onClick={ createCardPack }> add cardpack</Button>\r\n        <Search min={ +min } max={ +max }\r\n                defaultMin={minCardsCount} defaultMax={maxCardsCount}/>\r\n        <table className={ s.table }>\r\n            <thead>\r\n            <tr>\r\n                <td>Name<Sorting sortName={ \"name\" }/></td>\r\n                <td>CardsCount<Sorting sortName={ \"cardsCount\" }/></td>\r\n                <td>Last Updated<Sorting sortName={ \"updated\" }/></td>\r\n                <td>Created by<Sorting sortName={ \"created\" }/></td>\r\n                <td>Actions</td>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            { cardPacks.map(cardPack => {\r\n                return <CardPack cardPack={ cardPack }\r\n                                 deleteCardPack={ deleteCardPack }\r\n                                 editCardPack={ editCardPack }\r\n                />\r\n            }) }\r\n            </tbody>\r\n        </table>\r\n        <Paginator totalItemsCount={ cardPacksTotalCount }\r\n                   currentPage={ page }\r\n                   pageSize={ pageCount }/>\r\n    </> )\r\n}","import Button from \"../../../components/common/Button/Button\";\r\nimport React from \"react\";\r\nimport { CardsType } from \"../bll/cardsTypes\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppRootStoreType } from \"bll/Store\";\r\n\r\nexport const Card = ({ card, deleteCard, getUpdateCard }: CardsPropsType) => {\r\n\r\n    const userId=useSelector<AppRootStoreType, string>(st=>st.profileReducer.user._id)\r\n\r\n    const deleteCardId = () => {\r\n        deleteCard(card._id)\r\n    }\r\n\r\n    const editCardPack = () => {\r\n        getUpdateCard(card._id,'Why so serious?', '****')\r\n    }\r\n\r\n    return <tr>\r\n        <td>{card.question}</td>\r\n        <td>{card.answer}</td>\r\n        <td>{card.grade}</td>\r\n        <td>{card.updated}</td>\r\n        <td>\r\n            {card.user_id===userId && <Button onClick={deleteCardId}>Delete</Button>}\r\n            {card.user_id===userId && <Button onClick={editCardPack}>Edit</Button>}\r\n        </td>\r\n    </tr>\r\n}\r\n\r\ntype CardsPropsType = {\r\n    card: CardsType\r\n    deleteCard: (id: string) => void\r\n    getUpdateCard:(id: string, question: string, answer: string)=> void\r\n}","import { instance } from \"dal/apiConfing/apiConfing\";\r\nimport { CardsResponseType } from \"./CardsApiTypes\";\r\n\r\nexport const cardsAPI = {\r\n    getCards(cardsPack_id: string, sortCards: string, min:\r\n        string, max: string, pageCount: number, page: number, cardQuestion: string) {\r\n        return instance.get<CardsResponseType>(`cards/card`, {\r\n            params: {\r\n                cardsPack_id,\r\n                sortCards,\r\n                min,\r\n                max,\r\n                pageCount,\r\n                page,\r\n                cardQuestion,\r\n            },\r\n        })\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete(`cards/card`, { params: { id } })\r\n    },\r\n    createCard(cardsPack_id: string) {\r\n        return instance.post(`cards/card`, {\r\n            card: {\r\n                cardsPack_id,\r\n                question: \"the answer to the main question?\",\r\n                answer: \"42\",\r\n            },\r\n        })\r\n    },\r\n    updateCard(id: string, question: string, answer: string) {\r\n        return instance.put(`cards/card`, {\r\n            card: {\r\n                _id: id,\r\n                question,\r\n                answer,\r\n            },\r\n        })\r\n    },\r\n}","import { AppRootStoreType, AppThunkType } from \"bll/Store\";\r\nimport { cardsAPI } from \"../dal/CardsAPI\";\r\nimport { getCardsAC } from \"./cardsActions\";\r\nimport { setTotalItemsCount } from \"../../Packs/bll/CardPacksActions\";\r\n\r\nexport const getCardsTC = (token: string): AppThunkType => {\r\n    return (dispatch, getState: () => AppRootStoreType) => {\r\n        const state = getState();\r\n        const { sortCards, min, max, pageCount, page, cardQuestion } = state.cards;\r\n        cardsAPI.getCards(token, sortCards, min, max, pageCount, page, cardQuestion)\r\n            .then((res) => {\r\n                dispatch(getCardsAC(res.data.cards))\r\n                dispatch(setTotalItemsCount(res.data.cardsTotalCount))\r\n            })\r\n            .then(err => {\r\n                console.log(err) // just a plug (fix it later)\r\n            })\r\n    }\r\n}\r\n\r\nexport const deleteCardTC = (token: string, id: string): AppThunkType => {\r\n    return (dispatch, getState: () => AppRootStoreType) => {\r\n        cardsAPI.deleteCard(id)\r\n            .then(() => {\r\n                dispatch(getCardsTC(token))\r\n            })\r\n            .then(err => {\r\n                console.log(err) // just a plug (fix it later)\r\n            })\r\n    }\r\n}\r\n\r\nexport const createCardTC = (token: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        cardsAPI.createCard(token)\r\n            .then(() => {\r\n                dispatch(getCardsTC(token))\r\n            })\r\n            .catch(err => {\r\n                console.log(err) // just a plug (fix it later)\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateCardTC = (token: string, question: string, answer: string, id: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        cardsAPI.updateCard(id, question, answer)\r\n            .then(() => {\r\n                dispatch(getCardsTC(token))\r\n            })\r\n            .catch(err => {\r\n                console.log(err) // just a plug (fix it later)\r\n            })\r\n    }\r\n}","import { CardsType } from \"./cardsTypes\";\r\n\r\n\r\nexport const getCardsAC = (cards: CardsType[]) => ( {\r\n    type: \"CARDS_GET_CARDS\",\r\n    cards,\r\n} as const )\r\n\r\nexport const getCardsIdAC = (id: string) => ( {\r\n    type: \"CARDS_GET_ID\",\r\n    id,\r\n} as const )","import s from \"../Packs/Table.module.css\";\r\nimport { Sorting } from \"components/Sorting/Sorting\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStoreType } from \"bll/Store\";\r\nimport { Card } from \"./Card/Card\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { createCardTC, deleteCardTC, getCardsTC, updateCardTC } from \"./bll/cardsThunks\";\r\nimport Button from \"components/common/Button/Button\";\r\nimport { Search } from \"components/Search/Search\";\r\nimport { Paginator } from \"components/common/Paginator/Paginator\";\r\n\r\nexport const CardsTable = () => {\r\n    const dispatch = useDispatch();\r\n    const {\r\n        cards,\r\n        sortCards,\r\n        min,\r\n        max,\r\n        page,\r\n        pageCount,\r\n        cardQuestion,\r\n        cardsTotalCount,\r\n        maxGradeCount,\r\n        minGradeCount,\r\n    } = useSelector((state: AppRootStoreType) => state.cards)\r\n\r\n    const { token } = useParams();\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            dispatch(getCardsTC(token))\r\n        }\r\n    }, [dispatch, token, sortCards, min, max, page, pageCount, cardQuestion, maxGradeCount, minGradeCount])\r\n\r\n    const deleteCard = (id: string) => {\r\n        if (token)\r\n            dispatch(deleteCardTC(token, id))\r\n    }\r\n\r\n    const createCard = () => {\r\n        if (token)\r\n            dispatch(createCardTC(token))\r\n    }\r\n\r\n    const updateCard = (id: string, question: string, answer: string) => {\r\n        if (token)\r\n            dispatch(updateCardTC(token, question, answer, id))\r\n    }\r\n\r\n    return ( <>\r\n        <Button onClick={ createCard }>add Card</Button>\r\n        <Search min={ +min } max={ +max }\r\n                defaultMin={ minGradeCount }\r\n                defaultMax={ maxGradeCount }/>\r\n        <table className={ s.table }>\r\n            <thead>\r\n            <tr>\r\n                <td>Question</td>\r\n                <td>Answer</td>\r\n                <td>Grade<Sorting sortName={ \"grade\" }/></td>\r\n                <td>Created by<Sorting sortName={ \"created\" }/></td>\r\n                <td>Actions</td>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            { cards.map((card: any) => {\r\n                return <Card card={ card }\r\n                             deleteCard={ deleteCard }\r\n                             getUpdateCard={ updateCard }\r\n                />\r\n            }) }\r\n            </tbody>\r\n        </table>\r\n        <Paginator totalItemsCount={ cardsTotalCount }\r\n                   currentPage={ page }\r\n                   pageSize={ pageCount }/>\r\n    </> )\r\n}","import { Route, Routes } from \"react-router-dom\";\r\nimport { Login } from \"./Login/Login\";\r\nimport { Profile } from \"./Profile/Profile\";\r\nimport { SignUpContainer } from \"../features/authorization/signUp/SignUpContainer\";\r\nimport { Test } from \"./Test/Test\";\r\nimport { Error } from \"./Error\"\r\nimport { PasswordRestoreContainer } from \"../features/authorization/forgot/ui/PasswordRestore/PasswordRestoreContainer\";\r\nimport { NewPasswordContainer } from \"../features/authorization/forgot/ui/NewPassword/NewPasswordContainer\";\r\nimport { Table } from \"../features/Packs/Table\";\r\nimport { CardsTable } from \"../features/Cards/CardsTable\";\r\n\r\nexport const PATH = {\r\n    LOGIN: \"login\",\r\n    PROFILE: \"profile\",\r\n    SIGN_UP: \"signup\",\r\n    PASSWORD_RESTORE: 'restore',\r\n    NEW_PASSWORD: 'set-new-password/:token',\r\n    TEST: 'test',\r\n    CARD_PACKS: 'packs',\r\n    CARD: '/card/:token',\r\n}\r\n\r\nexport const Routing = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={ \"/\" } element={ <Login/> }/>\r\n            <Route path={ PATH.PROFILE } element={ <Profile/> }/>\r\n            <Route path={ PATH.SIGN_UP } element={ <SignUpContainer/> }/>\r\n            <Route path={ PATH.PASSWORD_RESTORE }\r\n                   element={ <PasswordRestoreContainer/> }/>\r\n            <Route path={ PATH.NEW_PASSWORD } element={ <NewPasswordContainer/> }/>\r\n            <Route path={ PATH.TEST } element={ <Test/> }/>\r\n            <Route path={ PATH.LOGIN } element={ <Login/> }/>\r\n            <Route path={ PATH.CARD_PACKS } element={ <Table/> }/>\r\n            <Route path={ PATH.CARD } element={ <CardsTable/> }/>\r\n            <Route path=\"*\" element={ <Error/> }/>\r\n        </Routes>\r\n    )\r\n}\r\n\r\n//","import { PATH } from \"../../Routes\";\r\n\r\nexport const sidebarData = [\r\n    {\r\n        title: \"Profile\",\r\n        path:  PATH.PROFILE,\r\n    },\r\n    {\r\n        title: \"SignUp\",\r\n        path:  PATH.SIGN_UP,\r\n    },\r\n    {\r\n        title: \"Restore Password\",\r\n        path:  PATH.PASSWORD_RESTORE,\r\n    },\r\n    {\r\n        title: \"New password\",\r\n        path:  PATH.NEW_PASSWORD,\r\n    },\r\n    {\r\n        title: \"Test\",\r\n        path:  PATH.TEST,\r\n    },\r\n    {\r\n        title: \"CardPacks\",\r\n        path:  PATH.CARD_PACKS,\r\n    },\r\n]","import style from \"./Navbar.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport * as FaIcons from \"react-icons/fa\";\r\nimport * as AiIcons from \"react-icons/ai\";\r\nimport { useState } from \"react\";\r\nimport { sidebarData } from \"../Navbar/sidebarData\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStoreType } from \"bll/Store\";\r\nimport { logout } from \"bll/loginReducer\";\r\n\r\nexport const Navbar = () => {\r\n    const [sidebar, setSidebar] = useState<boolean>(false)\r\n    const isLoggedIn = useSelector<AppRootStoreType, boolean>(state => state.loginReducer.isLogged)\r\n    const dispatch = useDispatch();\r\n\r\n    const showSidebar = () => {\r\n        setSidebar(!sidebar)\r\n    }\r\n\r\n    const logoutHandle = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return <>\r\n        <div className={ style.navbar }>\r\n            <NavLink to=\"#\" className={ style.menuBars }>\r\n                <FaIcons.FaBars onClick={ showSidebar }/>\r\n            </NavLink>\r\n            {isLoggedIn ? <a className={ style.login } onClick={logoutHandle}>\r\n                logout\r\n            </a> : <NavLink to=\"/login\" className={ style.login }>Login</NavLink>}\r\n\r\n        </div>\r\n        <nav\r\n            className={ sidebar ? `${ style['navMenu'] } ${ style['active'] }` : style['navMenu'] }>\r\n            <ul className={ style.navMenuItems } onClick={ showSidebar }>\r\n                <li className={ style.navbarToggle }>\r\n                    <NavLink to=\"#\" className={ style.menuBars }>\r\n                        <AiIcons.AiOutlineClose/>\r\n                    </NavLink>\r\n                </li>\r\n                { sidebarData.map((item, index) => {\r\n                    return (\r\n                        <li key={ index } className={ style.navText }>\r\n                            <NavLink to={ item.path }>\r\n                                <span>{ item.title }</span>\r\n                            </NavLink>\r\n                        </li>\r\n                    );\r\n                }) }\r\n            </ul>\r\n        </nav>\r\n    </>\r\n}","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport { Routing } from \"./components/Routes\";\r\nimport { Navbar } from \"./components/common/Navbar/Navbar\";\r\nimport { authMe } from \"../src/bll/loginReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n\r\nexport const App = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=> {\r\n        dispatch(authMe())\r\n    },[])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Navbar/>\r\n            <Routing/>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState: InitialStateType = {}\r\n\r\nexport const firstReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case\"SOME_ACTION\": {\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const someAC = () => {\r\n    return { type: \"SOME_ACTION\", payload: {} } as const\r\n}\r\n\r\ntype SomeACType = ReturnType<typeof someAC>\r\ntype InitialStateType = {}\r\ntype ActionType = SomeACType","import { CardPacksActionsType, CardPackType, InitStateType } from \"./CardPacksTypes\";\r\n\r\nexport const initialState = {\r\n    cardPacks: [] as CardPackType[],\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 103,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 5,\r\n    sortPacks: \"\",\r\n    packName: \"\",\r\n    min: '0',\r\n    max: '103',\r\n}\r\n\r\nexport const cardPacksReducer =\r\n    (state = initialState, action: CardPacksActionsType): InitStateType => {\r\n        switch (action.type) {\r\n            case \"SET-CARD-PACKS\":\r\n                return { ...state, cardPacks: action.cards }\r\n            case \"PAGINATOR/SET_TOTAL_ITEMS_COUNT\":\r\n                return { ...state, cardPacksTotalCount: action.totalItemsCount }\r\n            case \"PAGINATOR/SET_CURRENT_PAGE\":\r\n                return { ...state, page: action.page }\r\n            case \"PAGINATOR/SET_PAGE_COUNT\":\r\n                return { ...state, pageCount: action.pageCount }\r\n            case \"SORTING\":\r\n                return { ...state, sortPacks: action.item }\r\n            case \"SEARCH\":\r\n                return { ...state, packName: action.value }\r\n            case \"SET_MAX_ITEM_COUNT\":\r\n                return { ...state, max: action.max }\r\n            case \"SET_MIN_ITEM_COUNT\":\r\n                return { ...state, min: action.min }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n","import { ActionCardTypes, CardsType, InitialStateType } from \"./cardsTypes\";\r\n\r\nexport const initialState = {\r\n    cards: [] as CardsType[],\r\n    id: \"\",\r\n    sortCards: \"\",\r\n    min: '0',\r\n    max: '5',\r\n    pageCount: 5,\r\n    page: 1,\r\n    cardsTotalCount: 0,\r\n    cardQuestion: '',\r\n    maxGradeCount: 5,\r\n    minGradeCount: 0,\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action: ActionCardTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"CARDS_GET_CARDS\":\r\n            return { ...state, cards: action.cards }\r\n        case \"CARDS_GET_ID\":\r\n            return { ...state, id: action.id }\r\n        case \"SORTING\":\r\n            return { ...state, sortCards: action.item }\r\n        case \"SET_MIN_ITEM_COUNT\":\r\n            return { ...state, min: action.min }\r\n        case \"SET_MAX_ITEM_COUNT\":\r\n            return { ...state, max: action.max }\r\n        case \"PAGINATOR/SET_CURRENT_PAGE\":\r\n            return { ...state, page: action.page }\r\n        case \"PAGINATOR/SET_TOTAL_ITEMS_COUNT\":\r\n            return { ...state, cardsTotalCount: action.totalItemsCount }\r\n        case \"PAGINATOR/SET_PAGE_COUNT\":\r\n            return { ...state, pageCount: action.pageCount }\r\n        case \"SEARCH\":\r\n            return { ...state, cardQuestion: action.value }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { firstReducer } from \"./FirstReducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport { loginReducer } from \"./loginReducer\";\r\nimport { profileReducer } from \"./profileReducer\";\r\nimport { passwordRecoverReducer } from \"./passwordRecoverReducer\";\r\nimport { signUpReducer } from \"./signUpReducer\";\r\nimport { cardPacksReducer} from \"../features/Packs/bll/CardPacksReducer\";\r\nimport { CardPacksActionsType } from \"../features/Packs/bll/CardPacksTypes\";\r\nimport { cardsReducer } from \"../features/Cards/bll/cardsReducer\";\r\nimport { ActionCardTypes } from \"../features/Cards/bll/cardsTypes\";\r\n\r\nconst reducers = combineReducers({\r\n    firstReducer,\r\n    loginReducer,\r\n    profileReducer,\r\n    cards: cardsReducer,\r\n    recovery: passwordRecoverReducer,\r\n    registration: signUpReducer,\r\n    cardPacks: cardPacksReducer\r\n})\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport type AppRootStoreType = ReturnType<typeof reducers>\r\n\r\n//все типы экшенов для всего app\r\nexport type AppActionsType=CardPacksActionsType | ActionCardTypes;\r\n\r\nexport type AppThunkType<ReturnType=void>=ThunkAction<\r\n    ReturnType,\r\n    AppRootStoreType,\r\n    unknown,\r\n    AppActionsType\r\n    >\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./bll/Store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={ store }>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\nreportWebVitals();\r\n"],"sourceRoot":""}